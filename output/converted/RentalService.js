/**
 * @typedef {object} Rental
 * @property {number} [rentalId] - The unique ID of the rental (optional, usually generated by DB).
 * @property {number} inventoryId - The ID of the inventory item rented.
 * @property {number} customerId - The ID of the customer who rented.
 * @property {Date} rentalDate - The date and time the rental started.
 * @property {Date} lastUpdate - The date and time the rental record was last updated.
 * @property {Date|null} returnDate - The date and time the rental is expected or was returned. Can be null.
 * @property {number} staffId - The ID of the staff member who processed the rental.
 */

/**
 * Represents a service layer component for managing rental-related business logic.
 * This class orchestrates data access and implements specific business rules for rentals.
 * It acts as an intermediary between higher-level components (e.g., controllers)
 * and the data access layer (`RentalRepository`).
 */
class RentalService {
    /**
     * @private
     * @type {object}
     * The repository for interacting with rental data in the database.
     * Expected to have methods like `getRentalByCustomerId(id)` and `save(rental)`.
     */
    rentalRepository;

    /**
     * Creates an instance of RentalService.
     * This constructor is used for Dependency Injection, receiving an instance of
     * `RentalRepository` from the application's IoC container or manually.
     * @param {object} rentalRepository - An instance of a RentalRepository that provides data access for Rental entities.
     *                                    It must implement `getRentalByCustomerId(id)` and `save(rental)` methods,
     *                                    both of which should be asynchronous and return Promises.
     * @throws {Error} If `rentalRepository` is not provided or does not implement the required methods.
     */
    constructor(rentalRepository) {
        if (!rentalRepository || typeof rentalRepository.getRentalByCustomerId !== 'function' || typeof rentalRepository.save !== 'function') {
            throw new Error('RentalService: A valid RentalRepository instance with `getRentalByCustomerId` and `save` methods must be provided.');
        }
        this.rentalRepository = rentalRepository;
    }

    /**
     * Retrieves all `Rental` records associated with a specific customer.
     * This method delegates the actual data retrieval to the `rentalRepository`.
     * @async
     * @param {number} customerId - The unique identifier of the customer.
     * @returns {Promise<Rental[]>} A promise that resolves to an array of Rental objects.
     * @throws {Error} If `customerId` is invalid or if there is a problem retrieving rentals from the data store.
     */
    async getRentalsByCustomer(customerId) {
        if (typeof customerId !== 'number' || !Number.isInteger(customerId) || customerId <= 0) {
            throw new Error('RentalService.getRentalsByCustomer: Invalid customerId provided. Must be a positive integer.');
        }

        try {
            const rentals = await this.rentalRepository.getRentalByCustomerId(customerId);
            return rentals;
        } catch (error) {
            console.error(`RentalService.getRentalsByCustomer: Error fetching rentals for customer ID ${customerId}:`, error.message, error.stack);
            // Re-throw a more application-specific error or a generic one for higher layers to handle
            throw new Error(`Failed to retrieve rentals for customer ID ${customerId} due to a data access issue.`);
        }
    }

    /**
     * Creates and persists a new `Rental` record in the database.
     * It sets default values for `rentalDate` and `lastUpdate` to the current time,
     * and `staffId` to a hardcoded value of `1` as per business logic.
     * @async
     * @param {number} inventoryId - The ID of the inventory item being rented.
     * @param {number} customerId - The ID of the customer making the rental.
     * @param {Date|null} returnDate - The expected or actual return date of the rental. Can be `null` if not yet returned.
     *                                 Must be a JavaScript `Date` object or `null`.
     * @returns {Promise<Rental>} A promise that resolves to the newly created Rental object,
     *                            potentially including a generated `rentalId` from the database.
     * @throws {Error} If any input parameter is invalid or if there is a problem creating the rental record.
     */
    async addRental(inventoryId, customerId, returnDate) {
        if (typeof inventoryId !== 'number' || !Number.isInteger(inventoryId) || inventoryId <= 0) {
            throw new Error('RentalService.addRental: Invalid inventoryId provided. Must be a positive integer.');
        }
        if (typeof customerId !== 'number' || !Number.isInteger(customerId) || customerId <= 0) {
            throw new Error('RentalService.addRental: Invalid customerId provided. Must be a positive integer.');
        }
        if (returnDate !== null && !(returnDate instanceof Date)) {
            throw new Error('RentalService.addRental: Invalid returnDate provided. Must be a Date object or null.');
        }

        try {
            const now = new Date(); // Equivalent to Java's LocalDateTime.now()

            /** @type {Rental} */
            const rental = {
                inventoryId: inventoryId,
                customerId: customerId,
                rentalDate: now,
                lastUpdate: now,
                returnDate: returnDate,
                staffId: 1 // Hardcoded default value as per the original Java service's business logic
            };

            const newRental = await this.rentalRepository.save(rental);
            return newRental;
        } catch (error) {
            console.error(`RentalService.addRental: Error adding rental for inventory ID ${inventoryId}, customer ID ${customerId}:`, error.message, error.stack);
            // Re-throw a more application-specific error
            throw new Error(`Failed to add rental for inventory ID ${inventoryId}, customer ID ${customerId} due to a data access issue.`);
        }
    }
}

module.exports = RentalService;