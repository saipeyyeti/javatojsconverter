{
  "projectOverview": "This Spring Boot application provides a web-based interface for managing data within the Sakila database. It leverages a Spring MVC architecture, with dedicated controllers handling web requests for entities like actors, films, and customers, which are persisted via JPA models.",
  "modules": [
    {
      "name": "MavenWrapperDownloader",
      "description": "The MavenWrapperDownloader class is a utility responsible for downloading the `maven-wrapper.jar` file. It serves as a critical component in projects that use the Maven Wrapper, ensuring that the correct version of the wrapper JAR is available before Maven commands are executed. The downloader first attempts to read a `maven-wrapper.properties` file (located at `.mvn/wrapper/maven-wrapper.properties`) to check for a custom download URL. If a custom URL is specified via the `wrapperUrl` property, it uses that; otherwise, it defaults to a predefined URL on Maven Central. It handles the creation of necessary parent directories for the output JAR file and supports HTTP basic authentication by checking for `MVNW_USERNAME` and `MVNW_PASSWORD` environment variables. The program exits with a status code indicating success or failure.",
      "methods": [
        {
          "name": "main",
          "signature": "public static void main(String args[])",
          "description": "This is the entry point of the MavenWrapperDownloader application. It takes the base directory as a command-line argument, determines the download URL for the maven-wrapper.jar (either from a properties file or a default), creates the target directory if it doesn't exist, and then initiates the download process. It includes error handling for property file loading and the download itself, exiting with a status code of 0 for success and 1 for failure.",
          "complexity": "Medium"
        },
        {
          "name": "downloadFileFromURL",
          "signature": "private static void downloadFileFromURL(String urlString, File destination) throws Exception",
          "description": "This private helper method performs the actual file download from a given URL to a specified local destination. It checks for `MVNW_USERNAME` and `MVNW_PASSWORD` environment variables to configure HTTP basic authentication if credentials are provided. It uses Java NIO channels for efficient transfer of data from the URL's input stream to the output file.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "java.net.URL",
        "java.net.Authenticator",
        "java.net.PasswordAuthentication",
        "java.io.File",
        "java.io.FileInputStream",
        "java.io.FileOutputStream",
        "java.io.IOException",
        "java.nio.channels.ReadableByteChannel",
        "java.nio.channels.Channels",
        "java.util.Properties"
      ],
      "linesOfCode": 119,
      "filePath": ".\\sakila-java\\.mvn\\wrapper\\MavenWrapperDownloader.java",
      "type": "Util"
    },
    {
      "name": "SakilaProjectApplication",
      "description": "This class serves as the main entry point for the Sakila Project Spring Boot application. It is responsible for bootstrapping and launching the application context, enabling all Spring Boot auto-configuration and component scanning.",
      "methods": [
        {
          "name": "main",
          "signature": "public static void main(String[] args)",
          "description": "The standard entry point for a Java application. It delegates to SpringApplication.run() to initialize and start the Spring Boot application, including its embedded web server (if applicable) and all configured components.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.boot.SpringApplication",
        "org.springframework.boot.autoconfigure.SpringBootApplication"
      ],
      "linesOfCode": 14,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\SakilaProjectApplication.java",
      "type": "Util"
    },
    {
      "name": "ActorController",
      "description": "The ActorController class is a Spring MVC controller responsible for handling web requests related to actor information. It provides endpoints to retrieve lists of actors, filter actors by name, and display detailed information about an actor and their associated films. It interacts with ActorService and FilmService to fetch data.",
      "methods": [
        {
          "name": "ActorController",
          "signature": "public ActorController(FilmService filmService, ActorService actorService)",
          "description": "Constructor for ActorController, injecting FilmService and ActorService dependencies. These services are used to retrieve actor and film data.",
          "complexity": "Low"
        },
        {
          "name": "getActors",
          "signature": "public String getActors(ModelMap modelMap, @RequestParam(value = \"firstName\", defaultValue = \"ALL ACTORS\") String firstNameFilter, @RequestParam(value = \"lastName\", defaultValue = \"ALL ACTORS\") String lastNameFilter)",
          "description": "Handles GET requests to '/actors'. It retrieves a list of actors, optionally filtered by first name, last name, or both. If no filters are provided or 'ALL ACTORS' is specified, it fetches all actors. The results are added to the ModelMap for rendering in the 'actors/actors' view.",
          "complexity": "Medium"
        },
        {
          "name": "getActorFilmDetails",
          "signature": "public String getActorFilmDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id)",
          "description": "Handles GET requests to '/actors/details'. It retrieves the full name of an actor and a list of films they have acted in, based on the provided actor ID. This information is added to the ModelMap for rendering in the 'actors/actorDetails' view.",
          "complexity": "Low"
        },
        {
          "name": "findActorById",
          "signature": "public Actor findActorById(Integer id)",
          "description": "Retrieves an Actor entity by its unique ID using the ActorService.",
          "complexity": "Low"
        },
        {
          "name": "getActorFullNameFromID",
          "signature": "public String getActorFullNameFromID(Integer id)",
          "description": "Retrieves an Actor entity by its ID and constructs their full name (first name + last name).",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.services.ActorService",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "org.springframework.web.bind.annotation.RequestParam",
        "java.util.List"
      ],
      "linesOfCode": 62,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\ActorController.java",
      "type": "Controller"
    },
    {
      "name": "CategoryController",
      "description": "This class is a Spring MVC controller responsible for handling web requests related to film categories. It provides endpoints to retrieve a list of all categories and to view details for a specific category, including the films associated with it. It leverages `FilmService` and `CategoryService` to interact with the underlying data layer.",
      "methods": [
        {
          "name": "CategoryController",
          "signature": "public CategoryController(FilmService filmService, CategoryService categoryService)",
          "description": "Initializes the controller with instances of `FilmService` and `CategoryService` through Spring's dependency injection mechanism.",
          "complexity": "Low"
        },
        {
          "name": "getCategories",
          "signature": "public String getCategories(ModelMap modelMap)",
          "description": "Handles GET requests to the '/categories' endpoint. It retrieves all available film categories using the `CategoryService` and adds them to the `ModelMap` under the attribute name 'allCategories'. It then returns the logical view name 'categories/categories' for rendering.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryDetails",
          "signature": "public String getCategoryDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id)",
          "description": "Handles GET requests to the '/categories/details' endpoint. It expects a 'id' request parameter representing the category ID. It fetches the specific category by ID using `CategoryService` and retrieves all films associated with that category using `FilmService`. Both the category and its films are added to the `ModelMap` (as 'category' and 'films' respectively). It then returns the logical view name 'categories/categoryDetails' for rendering.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryById",
          "signature": "public Category getCategoryById(Integer id)",
          "description": "Retrieves a `Category` object by its unique identifier using the `CategoryService`. This method is not directly exposed as a web endpoint but can be used internally or by other components requiring category data.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Category",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "com.sparta.engineering72.sakilaproject.services.CategoryService",
        "org.springframework.ui.ModelMap"
      ],
      "linesOfCode": 41,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\CategoryController.java",
      "type": "Controller"
    },
    {
      "name": "CustomerController",
      "description": "This is a Spring MVC Controller responsible for handling web requests related to customer information and their rental history within the Sakila project. It provides endpoints for both regular customers (to view their own orders) and administrative users (owners) to view all customers and their detailed rental histories. The controller orchestrates data retrieval by interacting with various service layers (CustomerService, RentalService, InventoryService, FilmService) to fetch and combine data from different entities like Customer, Rental, Inventory, and Film to construct 'Order' objects for display.",
      "methods": [
        {
          "name": "CustomerController",
          "signature": "public CustomerController(CustomerService customerService, RentalService rentalService, InventoryService inventoryService, FilmService filmService)",
          "description": "Constructor for CustomerController. It uses Spring's @Autowired annotation for dependency injection, providing instances of CustomerService, RentalService, InventoryService, and FilmService to the controller.",
          "complexity": "Low"
        },
        {
          "name": "currentUser",
          "signature": "public String currentUser(ModelMap modelMap, HttpServletRequest request)",
          "description": "Handles GET requests to the '/customer' endpoint. It retrieves the email of the currently logged-in user from the HttpServletRequest, fetches the corresponding Customer object, and then constructs a list of 'Order' objects. Each order represents a rental, combining customer, film, and rental details. This list and the customer object are added to the ModelMap for rendering the 'customer/customer' view.",
          "complexity": "Medium"
        },
        {
          "name": "getCustomers",
          "signature": "public String getCustomers(ModelMap modelMap, @RequestParam(value = \"firstName\", defaultValue = \"ALL CUSTOMERS\") String firstNameFilter, @RequestParam(value = \"lastName\", defaultValue = \"ALL CUSTOMERS\") String lastNameFilter)",
          "description": "Handles GET requests to the '/owner/customers' endpoint. This method allows administrative users to view a list of customers, with optional filtering by first name and/or last name using request parameters. It calls the appropriate CustomerService method based on the provided filters (or retrieves all customers if no specific filters are applied). The filtered customer list and a complete list of all customers are added to the ModelMap for rendering the 'owner/customers' view.",
          "complexity": "Medium"
        },
        {
          "name": "showUsersRentalHistory",
          "signature": "public String showUsersRentalHistory(ModelMap modelMap, @PathVariable(name = \"id\") int id)",
          "description": "Handles GET requests to the '/owner/view/customers/{id}' endpoint. This method allows administrative users to view the detailed rental history for a specific customer identified by their ID in the path variable. It retrieves the customer, then fetches all their rentals. For each rental, it retrieves the associated inventory and film details to construct a list of 'Order' objects. This rental history and the customer object are added to the ModelMap for rendering the 'owner/customerDetails' view.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.*",
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "com.sparta.engineering72.sakilaproject.services.InventoryService",
        "com.sparta.engineering72.sakilaproject.services.RentalService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.Model",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.*",
        "javax.servlet.http.HttpServletRequest",
        "java.util.ArrayList",
        "java.util.List",
        "java.sql.Timestamp",
        "java.time.Instant",
        "java.time.LocalDate"
      ],
      "linesOfCode": 104,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\CustomerController.java",
      "type": "Controller"
    },
    {
      "name": "FilmController",
      "description": "The FilmController class is a Spring MVC controller responsible for handling web requests related to film management and rental operations within the Sakila project. It provides endpoints for displaying film lists, film details, facilitating film rentals for customers, and offering administrative functionalities such as managing, editing, and deleting films for owners. It leverages various service layers (FilmService, InventoryService, RentalService, CustomerService) to interact with the underlying data and business logic.",
      "methods": [
        {
          "name": "FilmController",
          "signature": "public FilmController(FilmService filmService, InventoryService inventoryService, RentalService rentalService, CustomerService customerService)",
          "description": "Constructor for FilmController, responsible for injecting required service dependencies (FilmService, InventoryService, RentalService, CustomerService) using Spring's @Autowired mechanism.",
          "complexity": "Low"
        },
        {
          "name": "getFilms",
          "signature": "public String getFilms(ModelMap modelMap, @RequestParam(value = \"title\", defaultValue = \"ALL FILMS\") String filter)",
          "description": "Handles GET requests to '/films'. It retrieves a list of films, either all films or filtered by title based on the 'filter' request parameter. The retrieved films, available films, and all films are added to the ModelMap for rendering the 'films/films' view.",
          "complexity": "Low"
        },
        {
          "name": "getFilmDetails",
          "signature": "public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id)",
          "description": "Handles GET requests to '/films/details'. It fetches the details of a specific film identified by its 'id'. It also determines if the film is currently available and adds both the film details and its availability status to the ModelMap for rendering the 'films/filmDetails' view.",
          "complexity": "Low"
        },
        {
          "name": "rentFilm",
          "signature": "public String rentFilm(ModelMap modelMap, Principal principal, @PathVariable(\"filmid\") int filmid)",
          "description": "Handles GET requests to '/rent/{filmid}'. This method allows a logged-in user (identified by 'principal') to rent a film. It finds the customer, iterates through the inventory to locate an available item for the specified film ID, records a new rental with a calculated return date, and then redirects the user to the '/films' page.",
          "complexity": "Medium"
        },
        {
          "name": "getFilmDetails",
          "signature": "public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \"title\", defaultValue = \"ALL FILMS\") String filter)",
          "description": "Handles GET requests to '/owner/manage-films'. This endpoint is intended for administrative users (owners) to manage films. It retrieves films based on an optional title filter, calculates the count of available copies for each film, and populates the ModelMap with these details for rendering the '/owner/manage-films' view.",
          "complexity": "Medium"
        },
        {
          "name": "showEditProductPage",
          "signature": "public ModelAndView showEditProductPage(@PathVariable(name = \"id\") int id)",
          "description": "Handles requests to '/edit/{id}'. It retrieves the details of a specific film by its 'id' and prepares a ModelAndView object to display the 'owner/edit-film' page, pre-populating it with the film's information for editing.",
          "complexity": "Low"
        },
        {
          "name": "deleteProduct",
          "signature": "public String deleteProduct(@PathVariable(name = \"id\") int id)",
          "description": "Handles requests to '/delete/{id}'. It deletes a film identified by its 'id' using the film service and then redirects the user to the '/owner/manage-films' page.",
          "complexity": "Low"
        },
        {
          "name": "findFilmByID",
          "signature": "public Film findFilmByID(Integer id)",
          "description": "A utility method that retrieves a Film entity by its unique identifier. This method is not directly exposed as a web endpoint but can be used internally by other components or methods within the controller.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "com.sparta.engineering72.sakilaproject.services.InventoryService",
        "com.sparta.engineering72.sakilaproject.services.RentalService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.transaction.annotation.Transactional",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "org.springframework.web.bind.annotation.PathVariable",
        "org.springframework.web.bind.annotation.RequestMapping",
        "org.springframework.web.bind.annotation.RequestParam",
        "javax.persistence.criteria.CriteriaBuilder",
        "java.security.Principal",
        "java.sql.Timestamp",
        "java.time.LocalDateTime",
        "java.util.ArrayList",
        "java.util.HashMap",
        "org.springframework.ui.Model",
        "org.springframework.web.servlet.ModelAndView",
        "java.time.Instant",
        "java.time.LocalDate",
        "java.util.List"
      ],
      "linesOfCode": 138,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\FilmController.java",
      "type": "Controller"
    },
    {
      "name": "MainController",
      "description": "A Spring MVC controller responsible for handling basic web requests and serving corresponding view names. It provides endpoints for the home page, login page, and user account page, typically used for navigating to static or templated views.",
      "methods": [
        {
          "name": "home",
          "signature": "public String home()",
          "description": "Handles GET requests to the root URL (/). It returns the logical view name \"home\", which Spring's view resolver will use to locate and render the appropriate view (e.g., home.html, home.jsp).",
          "complexity": "Low"
        },
        {
          "name": "login",
          "signature": "public String login()",
          "description": "Handles GET requests to the /login URL. It returns the logical view name \"login\", directing the user to the login page.",
          "complexity": "Low"
        },
        {
          "name": "account",
          "signature": "public String account()",
          "description": "Handles GET requests to the /account URL. It returns the logical view name \"account\", typically leading to a user's account details page.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.web.bind.annotation.RequestMapping",
        "org.springframework.stereotype.Controller"
      ],
      "linesOfCode": 25,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\MainController.java",
      "type": "Controller"
    },
    {
      "name": "StaffController",
      "description": "The StaffController class is a Spring MVC controller responsible for handling web requests related to staff operations, particularly for an 'owner' view. It retrieves staff information, customer counts, and inventory counts, then prepares this data for display on a web page.",
      "methods": [
        {
          "name": "StaffController",
          "signature": "public StaffController(StaffService staffService, CustomerService customerService, InventoryService inventoryService)",
          "description": "Constructor for StaffController. It injects instances of StaffService, CustomerService, and InventoryService to enable the controller to interact with the respective business logic layers.",
          "complexity": "Low"
        },
        {
          "name": "currentUser",
          "signature": "public String currentUser(ModelMap modelMap, HttpServletRequest request)",
          "description": "Handles GET requests to the '/owner' endpoint. It retrieves the username of the currently authenticated user from the HttpServletRequest, fetches the corresponding Staff entity, and obtains the total counts for customers and inventory items. These details are then added to the ModelMap to be rendered by the '/owner/owner' view.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.InventoryService",
        "com.sparta.engineering72.sakilaproject.services.StaffService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "javax.servlet.http.HttpServletRequest"
      ],
      "linesOfCode": 38,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\StaffController.java",
      "type": "Controller"
    },
    {
      "name": "Actor",
      "description": "The `Actor` class is a JPA (Java Persistence API) entity that represents an actor in the Sakila database. It maps to a database table, providing fields for the actor's unique ID, first name, last name, and the timestamp of the last update. It includes standard getter and setter methods for its properties, along with overridden `equals` and `hashCode` methods for proper object comparison and collection usage.",
      "methods": [
        {
          "name": "getActorId",
          "signature": "public int getActorId()",
          "description": "Retrieves the unique identifier for the actor. This field is mapped as the primary key in the database.",
          "complexity": "Low"
        },
        {
          "name": "setActorId",
          "signature": "public void setActorId(int actorId)",
          "description": "Sets the unique identifier for the actor.",
          "complexity": "Low"
        },
        {
          "name": "getFirstName",
          "signature": "public String getFirstName()",
          "description": "Retrieves the first name of the actor.",
          "complexity": "Low"
        },
        {
          "name": "setFirstName",
          "signature": "public void setFirstName(String firstName)",
          "description": "Sets the first name of the actor.",
          "complexity": "Low"
        },
        {
          "name": "getLastName",
          "signature": "public String getLastName()",
          "description": "Retrieves the last name of the actor.",
          "complexity": "Low"
        },
        {
          "name": "setLastName",
          "signature": "public void setLastName(String lastName)",
          "description": "Sets the last name of the actor.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update made to the actor's record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update made to the actor's record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Actor object with another object for equality. Two Actor objects are considered equal if all their fields (actorId, firstName, lastName, lastUpdate) are equal.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Actor object based on its fields (actorId, firstName, lastName, lastUpdate) to ensure consistency with the `equals` method.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 72,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Actor.java",
      "type": "Model"
    },
    {
      "name": "Category",
      "description": "The Category class is a JPA (Java Persistence API) entity that maps to a 'category' table in a relational database. It serves as a model for category-related data within the Sakila project, storing properties such as a unique identifier (categoryId), the category's name, and a timestamp for the last update. It provides standard getter and setter methods for its properties and overrides `equals()` and `hashCode()` for proper object comparison and integration into collections.",
      "methods": [
        {
          "name": "getCategoryId",
          "signature": "public int getCategoryId()",
          "description": "Retrieves the unique identifier for the category. This method is annotated with @Id and @Column, indicating it's the primary key mapping to the 'category_id' column.",
          "complexity": "Low"
        },
        {
          "name": "setCategoryId",
          "signature": "public void setCategoryId(int categoryId)",
          "description": "Sets the unique identifier for the category.",
          "complexity": "Low"
        },
        {
          "name": "getName",
          "signature": "public String getName()",
          "description": "Retrieves the name of the category. This method is annotated with @Basic and @Column, mapping to the 'name' column.",
          "complexity": "Low"
        },
        {
          "name": "setName",
          "signature": "public void setName(String name)",
          "description": "Sets the name of the category.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update to the category record. This method is annotated with @Basic and @Column, mapping to the 'last_update' column.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update to the category record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Category object with another object for equality. Equality is determined by comparing the 'categoryId', 'name', and 'lastUpdate' fields. This is an overridden method from `java.lang.Object`.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Category object based on its 'categoryId', 'name', and 'lastUpdate' fields. This is an overridden method from `java.lang.Object`.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 60,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Category.java",
      "type": "Model"
    },
    {
      "name": "Customer",
      "description": "The Customer class is a JPA entity representing a customer in the Sakila database. It maps to the 'customer' table and defines the structure for customer data, including personal details, activity status, and timestamps for creation and last update. It provides standard getters and setters for its properties and overrides `equals()` and `hashCode()` for proper object comparison and collection handling.",
      "methods": [
        {
          "name": "getCustomerId",
          "signature": "public int getCustomerId()",
          "description": "Retrieves the unique identifier for the customer.",
          "complexity": "Low"
        },
        {
          "name": "setCustomerId",
          "signature": "public void setCustomerId(int customerId)",
          "description": "Sets the unique identifier for the customer.",
          "complexity": "Low"
        },
        {
          "name": "getFirstName",
          "signature": "public String getFirstName()",
          "description": "Retrieves the first name of the customer.",
          "complexity": "Low"
        },
        {
          "name": "setFirstName",
          "signature": "public void setFirstName(String firstName)",
          "description": "Sets the first name of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getLastName",
          "signature": "public String getLastName()",
          "description": "Retrieves the last name of the customer.",
          "complexity": "Low"
        },
        {
          "name": "setLastName",
          "signature": "public void setLastName(String lastName)",
          "description": "Sets the last name of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getEmail",
          "signature": "public String getEmail()",
          "description": "Retrieves the email address of the customer.",
          "complexity": "Low"
        },
        {
          "name": "setEmail",
          "signature": "public void setEmail(String email)",
          "description": "Sets the email address of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getActive",
          "signature": "public byte getActive()",
          "description": "Retrieves the active status of the customer (e.g., 1 for active, 0 for inactive).",
          "complexity": "Low"
        },
        {
          "name": "setActive",
          "signature": "public void setActive(byte active)",
          "description": "Sets the active status of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getCreateDate",
          "signature": "public java.sql.Timestamp getCreateDate()",
          "description": "Retrieves the timestamp when the customer record was created.",
          "complexity": "Low"
        },
        {
          "name": "setCreateDate",
          "signature": "public void setCreateDate(java.sql.Timestamp createDate)",
          "description": "Sets the timestamp when the customer record was created.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update to the customer record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update to the customer record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Customer object with another object for equality based on all its persistent fields (customerId, firstName, lastName, email, active, createDate, lastUpdate).",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Customer object based on all its persistent fields (customerId, firstName, lastName, email, active, createDate, lastUpdate).",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Basic",
        "javax.persistence.Column",
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 109,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Customer.java",
      "type": "Model"
    },
    {
      "name": "Film",
      "description": "The Film class serves as a JPA (Java Persistence API) entity, representing the 'film' table in a relational database, likely part of a Sakila-like project. It acts as a data model, mapping database columns to Java object properties. The class includes fields for film attributes such as ID, title, description, release year, rental details, cost, rating, special features, and last update timestamp. It provides standard getter and setter methods for all properties, enabling data access and modification. Additionally, it overrides the `equals` and `hashCode` methods to ensure proper object comparison and functionality when used in collections, which is crucial for entity management within an ORM framework like Hibernate/JPA.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the unique identifier for the film.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the unique identifier for the film.",
          "complexity": "Low"
        },
        {
          "name": "getTitle",
          "signature": "public String getTitle()",
          "description": "Returns the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "setTitle",
          "signature": "public void setTitle(String title)",
          "description": "Sets the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "getDescription",
          "signature": "public String getDescription()",
          "description": "Returns the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "setDescription",
          "signature": "public void setDescription(String description)",
          "description": "Sets the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "getReleaseYear",
          "signature": "public int getReleaseYear()",
          "description": "Returns the release year of the film.",
          "complexity": "Low"
        },
        {
          "name": "setReleaseYear",
          "signature": "public void setReleaseYear(int releaseYear)",
          "description": "Sets the release year of the film.",
          "complexity": "Low"
        },
        {
          "name": "getRentalDuration",
          "signature": "public Integer getRentalDuration()",
          "description": "Returns the rental duration of the film in days.",
          "complexity": "Low"
        },
        {
          "name": "setRentalDuration",
          "signature": "public void setRentalDuration(Integer rentalDuration)",
          "description": "Sets the rental duration of the film in days.",
          "complexity": "Low"
        },
        {
          "name": "getRentalRate",
          "signature": "public BigDecimal getRentalRate()",
          "description": "Returns the rental rate of the film.",
          "complexity": "Low"
        },
        {
          "name": "setRentalRate",
          "signature": "public void setRentalRate(BigDecimal rentalRate)",
          "description": "Sets the rental rate of the film.",
          "complexity": "Low"
        },
        {
          "name": "getLength",
          "signature": "public Integer getLength()",
          "description": "Returns the length of the film in minutes.",
          "complexity": "Low"
        },
        {
          "name": "setLength",
          "signature": "public void setLength(Integer length)",
          "description": "Sets the length of the film in minutes.",
          "complexity": "Low"
        },
        {
          "name": "getReplacementCost",
          "signature": "public BigDecimal getReplacementCost()",
          "description": "Returns the replacement cost of the film.",
          "complexity": "Low"
        },
        {
          "name": "setReplacementCost",
          "signature": "public void setReplacementCost(BigDecimal replacementCost)",
          "description": "Sets the replacement cost of the film.",
          "complexity": "Low"
        },
        {
          "name": "getRating",
          "signature": "public String getRating()",
          "description": "Returns the MPAA rating of the film.",
          "complexity": "Low"
        },
        {
          "name": "setRating",
          "signature": "public void setRating(String rating)",
          "description": "Sets the MPAA rating of the film.",
          "complexity": "Low"
        },
        {
          "name": "getSpecialFeatures",
          "signature": "public String getSpecialFeatures()",
          "description": "Returns a string describing special features of the film.",
          "complexity": "Low"
        },
        {
          "name": "setSpecialFeatures",
          "signature": "public void setSpecialFeatures(String specialFeatures)",
          "description": "Sets the special features of the film.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update to the film record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update to the film record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Film object with another object for equality based on all its fields. Returns true if the objects are identical or if they are Film objects with matching values for all properties, otherwise returns false.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Film object based on all its fields. This method is consistent with the equals method, meaning equal objects will have equal hash codes.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.format.annotation.DateTimeFormat",
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.math.BigDecimal",
        "java.sql.Timestamp",
        "java.time.LocalDate",
        "java.util.Objects"
      ],
      "linesOfCode": 158,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Film.java",
      "type": "Model"
    },
    {
      "name": "FilmActor",
      "description": "JPA entity representing the `film_actor` join table in the Sakila database. It models the many-to-many relationship between films and actors, serving as a composite primary key for the association. This class is used by Hibernate/JPA to map Java objects to the `film_actor` table.",
      "methods": [
        {
          "name": "getActorId",
          "signature": "public int getActorId()",
          "description": "Retrieves the ID of the actor associated with this film-actor relationship. This field is part of the composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setActorId",
          "signature": "public void setActorId(int actorId)",
          "description": "Sets the ID of the actor for this film-actor relationship.",
          "complexity": "Low"
        },
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Retrieves the ID of the film associated with this film-actor relationship. This field is part of the composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the ID of the film for this film-actor relationship.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update for this film-actor record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update for this film-actor record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(java.lang.Object o)",
          "description": "Compares this FilmActor object with another object for equality. Two FilmActor objects are considered equal if their actorId, filmId, and lastUpdate fields are equal. This method is crucial for correct behavior in collections.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this FilmActor object based on its actorId, filmId, and lastUpdate fields, consistent with the `equals` method. This method is crucial for correct behavior in hash-based collections.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence",
        "java.sql.Timestamp",
        "java.util.Objects",
        "com.sparta.engineering72.sakilaproject.entities.FilmActorPK"
      ],
      "linesOfCode": 61,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmActor.java",
      "type": "Model"
    },
    {
      "name": "FilmActorPK",
      "description": "This class represents a composite primary key for the FilmActor entity in a JPA (Java Persistence API) context. It combines 'actorId' and 'filmId' to uniquely identify a record in a many-to-many relationship table. It implements the Serializable interface, which is a requirement for embeddable or composite primary key classes in JPA.",
      "methods": [
        {
          "name": "getActorId",
          "signature": "public Integer getActorId()",
          "description": "Returns the actor's ID, which is a component of the composite primary key. This method is annotated with @Column(name = \"actor_id\") to map to the 'actor_id' database column and @Id to mark it as an identifier.",
          "complexity": "Low"
        },
        {
          "name": "setActorId",
          "signature": "public void setActorId(int actorId)",
          "description": "Sets the actor's ID for this composite primary key instance.",
          "complexity": "Low"
        },
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the film's ID, which is a component of the composite primary key. This method is annotated with @Column(name = \"film_id\") to map to the 'film_id' database column and @Id to mark it as an identifier.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the film's ID for this composite primary key instance.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Overrides the default equals method to provide value-based equality comparison for FilmActorPK objects. It checks if the 'actorId' and 'filmId' of two FilmActorPK instances are identical. This is crucial for the correct functioning of composite primary keys in JPA and when using these objects in collections.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Overrides the default hashCode method to provide a hash code consistent with the equals implementation. It uses Objects.hash() to generate a hash based on both 'actorId' and 'filmId', which is essential for objects used in hash-based collections (e.g., HashMap, HashSet).",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Column",
        "javax.persistence.Id",
        "java.io.Serializable",
        "java.util.Objects"
      ],
      "linesOfCode": 46,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmActorPK.java",
      "type": "Util"
    },
    {
      "name": "FilmCategory",
      "description": "This class is a JPA (Java Persistence API) entity that maps to the 'film_category' table in the 'sakila' database. It represents the many-to-many relationship between 'Film' and 'Category' entities. It uses a composite primary key defined by 'FilmCategoryPK' and includes fields for 'filmId', 'categoryId', and 'lastUpdate'. It provides standard getters and setters for its properties, along with overridden 'equals' and 'hashCode' methods for proper object comparison and collection usage, crucial for JPA entity management.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the ID of the film associated with this category entry. This field is part of the composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(Integer filmId)",
          "description": "Sets the ID of the film for this category entry.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryId",
          "signature": "public int getCategoryId()",
          "description": "Returns the ID of the category associated with this film entry. This field is part of the composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setCategoryId",
          "signature": "public void setCategoryId(Integer categoryId)",
          "description": "Sets the ID of the category for this film entry.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update for this film-category association.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update for this film-category association.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this FilmCategory object with the specified object for equality. It returns true if the objects are identical or if the filmId, categoryId, and lastUpdate fields are equal.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Returns a hash code value for this FilmCategory object. The hash code is based on the filmId, categoryId, and lastUpdate fields.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Entity",
        "javax.persistence.Table",
        "javax.persistence.IdClass",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.sql.Timestamp",
        "java.util.Objects",
        "com.sparta.engineering72.sakilaproject.entities.FilmCategoryPK"
      ],
      "linesOfCode": 61,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmCategory.java",
      "type": "Model"
    },
    {
      "name": "FilmCategoryPK",
      "description": "This class serves as a composite primary key for the FilmCategory entity within a JPA (Java Persistence API) context. It is designed to represent the combined identifier for a record in a join table that links films and categories. It encapsulates the filmId and categoryId, making them a single logical key. The class implements `Serializable` as required by JPA for embeddable or composite primary keys and correctly overrides `equals` and `hashCode` methods to ensure proper object comparison and hashing, which is vital for JPA entity management and collection operations.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the integer ID of the film component of this composite primary key. This method is annotated with `@Column` to map to the 'film_id' database column and `@Id` to mark it as part of the primary key.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the integer ID of the film component for this composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryId",
          "signature": "public int getCategoryId()",
          "description": "Returns the integer ID of the category component of this composite primary key. This method is annotated with `@Column` to map to the 'category_id' database column and `@Id` to mark it as part of the primary key.",
          "complexity": "Low"
        },
        {
          "name": "setCategoryId",
          "signature": "public void setCategoryId(int categoryId)",
          "description": "Sets the integer ID of the category component for this composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Overrides the default `equals` method to provide value-based comparison for `FilmCategoryPK` objects. It checks if the `filmId` and `categoryId` of two `FilmCategoryPK` instances are identical, which is crucial for correct behavior in collections and JPA entity management.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Overrides the default `hashCode` method to generate a hash code based on the `filmId` and `categoryId` fields. This ensures consistency with the `equals` method and allows `FilmCategoryPK` objects to function correctly in hash-based collections.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Column",
        "javax.persistence.Id",
        "java.io.Serializable",
        "java.util.Objects"
      ],
      "linesOfCode": 46,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmCategoryPK.java",
      "type": "Util"
    },
    {
      "name": "FilmText",
      "description": "FilmText is a JPA entity class that maps to the 'film_text' table in the 'sakila' database. It represents a data model for film text information, including a unique film ID, title, and description. This class facilitates object-relational mapping (ORM) for database interactions, allowing Java objects to be persisted to and retrieved from the database.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the unique identifier for the film text. This field is designated as the primary key.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the unique identifier for the film text.",
          "complexity": "Low"
        },
        {
          "name": "getTitle",
          "signature": "public String getTitle()",
          "description": "Returns the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "setTitle",
          "signature": "public void setTitle(String title)",
          "description": "Sets the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "getDescription",
          "signature": "public String getDescription()",
          "description": "Returns the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "setDescription",
          "signature": "public void setDescription(String description)",
          "description": "Sets the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this FilmText object with another object for equality. Two FilmText objects are considered equal if their filmId, title, and description fields are all equal.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this FilmText object based on its filmId, title, and description fields. This method is consistent with the equals method.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "javax.persistence",
        "java.util.Objects"
      ],
      "linesOfCode": 58,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmText.java",
      "type": "Model"
    },
    {
      "name": "Inventory",
      "description": "The Inventory class is a JPA (Java Persistence API) entity that models an inventory item in a database. It represents a specific copy of a film available in a store, typically used within a Sakila-like database project. It defines the structure and mapping for the 'inventory' table, including its primary key and other relevant attributes.",
      "methods": [
        {
          "name": "getInventoryId",
          "signature": "public int getInventoryId()",
          "description": "Returns the unique identifier for this inventory item. This field is annotated as the primary key (@Id) and maps to the 'inventory_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setInventoryId",
          "signature": "public void setInventoryId(int inventoryId)",
          "description": "Sets the unique identifier for this inventory item.",
          "complexity": "Low"
        },
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the ID of the film associated with this inventory item. This field maps to the 'film_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the ID of the film associated with this inventory item.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update to this inventory item's record. This field maps to the 'last_update' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update to this inventory item's record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Inventory object with another object for equality. Equality is determined by comparing the 'inventoryId' and 'lastUpdate' fields.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Computes a hash code for this Inventory object based on its 'inventoryId' and 'lastUpdate' fields, consistent with the equals method.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.*",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 56,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Inventory.java",
      "type": "Model"
    },
    {
      "name": "Order",
      "description": "The Order class serves as a data model or entity within the Sakila project. It encapsulates a relationship between a Customer, a Film, and a Rental event, effectively representing a specific instance where a customer rented a particular film. It provides a constructor for initialization and standard getter and setter methods for accessing and modifying its encapsulated entities.",
      "methods": [
        {
          "name": "Order",
          "signature": "public Order(Customer customer, Film film, Rental rental)",
          "description": "Constructs a new Order instance, initializing it with the provided Customer, Film, and Rental objects.",
          "complexity": "Low"
        },
        {
          "name": "getCustomer",
          "signature": "public Customer getCustomer()",
          "description": "Returns the Customer object associated with this order.",
          "complexity": "Low"
        },
        {
          "name": "setCustomer",
          "signature": "public void setCustomer(Customer customer)",
          "description": "Sets the Customer object for this order.",
          "complexity": "Low"
        },
        {
          "name": "getFilm",
          "signature": "public Film getFilm()",
          "description": "Returns the Film object associated with this order.",
          "complexity": "Low"
        },
        {
          "name": "setFilm",
          "signature": "public void setFilm(Film film)",
          "description": "Sets the Film object for this order.",
          "complexity": "Low"
        },
        {
          "name": "getRental",
          "signature": "public Rental getRental()",
          "description": "Returns the Rental object associated with this order.",
          "complexity": "Low"
        },
        {
          "name": "setRental",
          "signature": "public void setRental(Rental rental)",
          "description": "Sets the Rental object for this order.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "Customer",
        "Film",
        "Rental"
      ],
      "linesOfCode": 38,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Order.java",
      "type": "Util"
    },
    {
      "name": "Rental",
      "description": "This class serves as a JPA (Java Persistence API) entity, mapping to a 'rental' table in a relational database. It represents a single rental transaction in a Sakila-like database schema, holding details such as the rental ID, rental date, associated inventory, customer, return date, staff member, and the last update timestamp. It provides standard getter and setter methods for its properties and overrides `equals()` and `hashCode()` for proper object comparison and collection usage, making it suitable for ORM operations.",
      "methods": [
        {
          "name": "getRentalId",
          "signature": "public int getRentalId()",
          "description": "Retrieves the unique identifier for this rental record.",
          "complexity": "Low"
        },
        {
          "name": "setRentalId",
          "signature": "public void setRentalId(int rentalId)",
          "description": "Sets the unique identifier for this rental record.",
          "complexity": "Low"
        },
        {
          "name": "getRentalDate",
          "signature": "public java.sql.Timestamp getRentalDate()",
          "description": "Retrieves the date and time when the rental transaction occurred.",
          "complexity": "Low"
        },
        {
          "name": "setRentalDate",
          "signature": "public void setRentalDate(java.sql.Timestamp rentalDate)",
          "description": "Sets the date and time when the rental transaction occurred.",
          "complexity": "Low"
        },
        {
          "name": "getInventoryId",
          "signature": "public int getInventoryId()",
          "description": "Retrieves the ID of the inventory item associated with this rental.",
          "complexity": "Low"
        },
        {
          "name": "setInventoryId",
          "signature": "public void setInventoryId(int inventoryId)",
          "description": "Sets the ID of the inventory item associated with this rental.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerId",
          "signature": "public int getCustomerId()",
          "description": "Retrieves the ID of the customer who made this rental.",
          "complexity": "Low"
        },
        {
          "name": "setCustomerId",
          "signature": "public void setCustomerId(int customerId)",
          "description": "Sets the ID of the customer who made this rental.",
          "complexity": "Low"
        },
        {
          "name": "getReturnDate",
          "signature": "public java.sql.Timestamp getReturnDate()",
          "description": "Retrieves the date and time when the rented item was returned.",
          "complexity": "Low"
        },
        {
          "name": "setReturnDate",
          "signature": "public void setReturnDate(java.sql.Timestamp returnDate)",
          "description": "Sets the date and time when the rented item was returned.",
          "complexity": "Low"
        },
        {
          "name": "getStaffId",
          "signature": "public int getStaffId()",
          "description": "Retrieves the ID of the staff member who processed this rental.",
          "complexity": "Low"
        },
        {
          "name": "setStaffId",
          "signature": "public void setStaffId(int staffId)",
          "description": "Sets the ID of the staff member who processed this rental.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update made to this rental record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update made to this rental record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(java.lang.Object o)",
          "description": "Compares this Rental object with another object for equality. Two Rental objects are considered equal if all their corresponding fields (rentalId, inventoryId, customerId, staffId, rentalDate, returnDate, and lastUpdate) are equal.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Rental object based on all its significant fields (rentalId, inventoryId, customerId, staffId, rentalDate, returnDate, and lastUpdate).",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "javax.persistence.*",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 107,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Rental.java",
      "type": "Model"
    },
    {
      "name": "Staff",
      "description": "The Staff class is a JPA (Java Persistence API) entity representing the 'staff' table in a relational database, typically used within the Sakila project. It serves as a model for staff members, encapsulating their attributes such as ID, first name, last name, picture, email, active status, username, password, and the timestamp of the last update. It provides standard getter and setter methods for property access and includes overridden `equals()` and `hashCode()` methods to ensure proper object comparison and functionality within collections.",
      "methods": [
        {
          "name": "getStaffId",
          "signature": "public int getStaffId()",
          "description": "Returns the unique identifier for the staff member.",
          "complexity": "Low"
        },
        {
          "name": "setStaffId",
          "signature": "public void setStaffId(int staffId)",
          "description": "Sets the unique identifier for the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getFirstName",
          "signature": "public String getFirstName()",
          "description": "Returns the first name of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "setFirstName",
          "signature": "public void setFirstName(String firstName)",
          "description": "Sets the first name of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getLastName",
          "signature": "public String getLastName()",
          "description": "Returns the last name of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "setLastName",
          "signature": "public void setLastName(String lastName)",
          "description": "Sets the last name of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getPicture",
          "signature": "public byte[] getPicture()",
          "description": "Returns the staff member's picture as a byte array.",
          "complexity": "Low"
        },
        {
          "name": "setPicture",
          "signature": "public void setPicture(byte[] picture)",
          "description": "Sets the staff member's picture using a byte array.",
          "complexity": "Low"
        },
        {
          "name": "getEmail",
          "signature": "public String getEmail()",
          "description": "Returns the email address of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "setEmail",
          "signature": "public void setEmail(String email)",
          "description": "Sets the email address of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getActive",
          "signature": "public byte getActive()",
          "description": "Returns the active status of the staff member (e.g., 0 for inactive, 1 for active).",
          "complexity": "Low"
        },
        {
          "name": "setActive",
          "signature": "public void setActive(byte active)",
          "description": "Sets the active status of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getUsername",
          "signature": "public String getUsername()",
          "description": "Returns the username of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "setUsername",
          "signature": "public void setUsername(String username)",
          "description": "Sets the username of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getPassword",
          "signature": "public String getPassword()",
          "description": "Returns the password of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "setPassword",
          "signature": "public void setPassword(String password)",
          "description": "Sets the password of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update made to the staff record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update made to the staff record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Staff object with another object for equality. It considers all fields, including performing a deep comparison for the 'picture' byte array.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Staff object based on its fields. It uses `Objects.hash` for most fields and `Arrays.hashCode` for the 'picture' byte array to ensure consistency with `equals()`.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "javax.persistence.Basic",
        "javax.persistence.Column",
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "java.sql.Timestamp",
        "java.util.Arrays",
        "java.util.Objects"
      ],
      "linesOfCode": 136,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Staff.java",
      "type": "Model"
    },
    {
      "name": "ActorRepository",
      "description": "The ActorRepository interface serves as a Data Access Object (DAO) for the Actor entity within the Sakila project. It extends Spring Data JPA's JpaRepository, providing standard CRUD (Create, Read, Update, Delete) operations for Actor entities without explicit implementation. Additionally, it defines custom query methods based on Spring Data JPA's method naming conventions to retrieve actors by first name, last name, or a combination of both, and to fetch a single actor by their unique ID.",
      "methods": [
        {
          "name": "findActorsByFirstNameAndLastName",
          "signature": "List<Actor> findActorsByFirstNameAndLastName(String firstName, String lastName)",
          "description": "Retrieves a list of Actor entities whose first name matches the provided 'firstName' and last name matches the provided 'lastName'.",
          "complexity": "Low"
        },
        {
          "name": "findActorsByFirstName",
          "signature": "List<Actor> findActorsByFirstName(String firstName)",
          "description": "Retrieves a list of Actor entities whose first name matches the provided 'firstName'.",
          "complexity": "Low"
        },
        {
          "name": "findActorsByLastName",
          "signature": "List<Actor> findActorsByLastName(String lastName)",
          "description": "Retrieves a list of Actor entities whose last name matches the provided 'lastName'.",
          "complexity": "Low"
        },
        {
          "name": "getActorByActorId",
          "signature": "Actor getActorByActorId(Integer id)",
          "description": "Retrieves a single Actor entity by its unique identifier, 'actorId'.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 16,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\ActorRepository.java",
      "type": "DAO"
    },
    {
      "name": "CategoryRepository",
      "description": "This is a Spring Data JPA repository interface, acting as a Data Access Object (DAO) for the 'Category' entity. It extends `JpaRepository`, inheriting a comprehensive set of standard CRUD (Create, Read, Update, Delete) operations, as well as paging and sorting capabilities, for `Category` objects. The primary key type for the `Category` entity is `Integer`. Additionally, it defines a custom query method to retrieve a `Category` entity based on its unique `categoryId`.",
      "methods": [
        {
          "name": "getCategoryByCategoryId",
          "signature": "Category getCategoryByCategoryId(Integer id)",
          "description": "Retrieves a single `Category` entity from the database whose `categoryId` matches the provided `id`. Spring Data JPA automatically generates the underlying SQL query based on the method's naming convention.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Category",
        "org.springframework.data.jpa.repository.JpaRepository",
        "java.util.List"
      ],
      "linesOfCode": 11,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\CategoryRepository.java",
      "type": "DAO"
    },
    {
      "name": "CustomerRepository",
      "description": "This is a Spring Data JPA repository interface for the Customer entity. It provides a set of data access operations (CRUD and custom queries) for managing Customer objects in the Sakila database project. It abstracts away the underlying database interactions, allowing the service layer to interact with customer data through a simple, well-defined interface.",
      "methods": [
        {
          "name": "getCustomerByCredentials",
          "signature": "Customer getCustomerByCredentials(String username, Integer password)",
          "description": "Retrieves a Customer entity based on the provided email (username) and customer ID (password). This method uses a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByUsername",
          "signature": "Customer getCustomerByUsername(String username)",
          "description": "Retrieves a Customer entity based on their email address. This method uses a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFirstName",
          "signature": "List<Customer> getCustomersByFirstName(String firstName)",
          "description": "Retrieves a list of Customer entities whose first name matches the given input. This method uses a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByLastName",
          "signature": "List<Customer> getCustomersByLastName(String lastName)",
          "description": "Retrieves a list of Customer entities whose last name matches the given input. This method uses a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFullName",
          "signature": "List<Customer> getCustomersByFullName(String firstName, String lastName)",
          "description": "Retrieves a list of Customer entities whose first name and last name both match the given inputs. This method uses a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByCustomerId",
          "signature": "Customer getCustomerByCustomerId(Integer id)",
          "description": "Retrieves a Customer entity based on their unique customer ID. This method leverages Spring Data JPA's derived query capabilities.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByEmail",
          "signature": "Customer getCustomerByEmail(String email)",
          "description": "Retrieves a Customer entity based on their email address. This method leverages Spring Data JPA's derived query capabilities.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerCount",
          "signature": "Integer getCustomerCount()",
          "description": "Returns the total number of Customer records currently stored in the database. This method uses a native SQL query.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 37,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\CustomerRepository.java",
      "type": "DAO"
    },
    {
      "name": "FilmRepository",
      "description": "This is a Spring Data JPA repository interface responsible for providing data access operations for the Film entity. It extends JpaRepository to inherit standard CRUD (Create, Read, Update, Delete) functionalities and defines custom queries to retrieve film-related data based on various criteria, such as availability, category, actor, and title. It interacts with the 'film', 'inventory', 'film_category', 'category', 'actor', and 'film_actor' tables in the Sakila database.",
      "methods": [
        {
          "name": "getAvailableFilmCount",
          "signature": "Integer getAvailableFilmCount(Integer id)",
          "description": "Counts the number of available copies for a specific film, identified by its film ID, by joining the 'film' and 'inventory' tables.",
          "complexity": "Low"
        },
        {
          "name": "getAvailableFilms",
          "signature": "List<Film> getAvailableFilms()",
          "description": "Retrieves a list of all films that are currently available in the inventory, by joining the 'film' and 'inventory' tables.",
          "complexity": "Low"
        },
        {
          "name": "getAllFilmsByCategory",
          "signature": "List<Film> getAllFilmsByCategory(Integer categoryId)",
          "description": "Fetches all films belonging to a specific category, identified by its category ID, by joining the 'film', 'film_category', and 'category' tables.",
          "complexity": "Low"
        },
        {
          "name": "getAllFilmsByActor",
          "signature": "List<Film> getAllFilmsByActor(Integer actorId)",
          "description": "Retrieves all films in which a specific actor, identified by their actor ID, has performed. This involves joining the 'actor', 'film_actor', and 'film' tables.",
          "complexity": "Low"
        },
        {
          "name": "findByTitle",
          "signature": "List<Film> findByTitle(String title)",
          "description": "Finds a list of films by their title. This method leverages Spring Data JPA's query derivation mechanism.",
          "complexity": "Low"
        },
        {
          "name": "getFilmByFilmId",
          "signature": "Film getFilmByFilmId(Integer id)",
          "description": "Retrieves a single Film entity by its unique film ID. This method leverages Spring Data JPA's query derivation mechanism.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.FilmActor",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 34,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\FilmRepository.java",
      "type": "DAO"
    },
    {
      "name": "InventoryRepository",
      "description": "This is a Spring Data JPA repository interface for the Inventory entity. It extends JpaRepository, providing standard CRUD operations for Inventory objects with an Integer ID. Additionally, it defines custom database queries using Spring Data JPA's @Query annotation to retrieve specific inventory details, delete inventory records based on film ID, and count the total number of inventory items.",
      "methods": [
        {
          "name": "getInventoriesByInventoryId",
          "signature": "Inventory getInventoriesByInventoryId(Integer inventoryId)",
          "description": "Retrieves an Inventory entity along with its associated Rental information by a given inventory ID. The query performs an INNER JOIN between the 'inventory' and 'rental' tables to fetch comprehensive data.",
          "complexity": "Low"
        },
        {
          "name": "deleteInventoryByInventoryId",
          "signature": "void deleteInventoryByInventoryId(@Param(\"id\")Integer id)",
          "description": "Deletes Inventory entities from the database where the film_id matches the provided ID. This is a modifying operation that directly impacts the database records.",
          "complexity": "Low"
        },
        {
          "name": "getInventoryCount",
          "signature": "Integer getInventoryCount()",
          "description": "Retrieves the total count of all Inventory records currently stored in the database.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Modifying",
        "org.springframework.data.jpa.repository.Query",
        "org.springframework.data.repository.query.Param"
      ],
      "linesOfCode": 27,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\InventoryRepository.java",
      "type": "DAO"
    },
    {
      "name": "RentalRepository",
      "description": "This is a Data Access Object (DAO) interface for the Rental entity. It extends Spring Data JPA's JpaRepository, providing standard CRUD (Create, Read, Update, Delete) operations for Rental objects. Additionally, it defines custom query methods to retrieve rental information based on specific criteria, such as rental ID or customer ID.",
      "methods": [
        {
          "name": "getRentalByRentalId",
          "signature": "Rental getRentalByRentalId(Integer id)",
          "description": "Retrieves a single Rental entity from the database based on its unique rental ID. Spring Data JPA automatically generates the query for this method based on its naming convention.",
          "complexity": "Low"
        },
        {
          "name": "getRentalByCustomerId",
          "signature": "List<Rental> getRentalByCustomerId(Integer customerId)",
          "description": "Retrieves a list of Rental entities associated with a specific customer ID. This method uses a custom native SQL query that performs an INNER JOIN between the 'rental' and 'customer' tables to filter rentals by the given customer ID.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 17,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\RentalRepository.java",
      "type": "DAO"
    },
    {
      "name": "StaffRepository",
      "description": "Spring Data JPA repository interface for the Staff entity. It extends JpaRepository to provide standard CRUD (Create, Read, Update, Delete) operations for Staff objects, and defines custom query methods to interact with the 'staff' table in the database.",
      "methods": [
        {
          "name": "getStaffByUsername",
          "signature": "Staff getStaffByUsername(String username)",
          "description": "Retrieves a Staff entity from the database based on the provided username. It executes a native SQL query to find a staff member whose username matches the input parameter.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query"
      ],
      "linesOfCode": 16,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\StaffRepository.java",
      "type": "DAO"
    },
    {
      "name": "FailureHandler",
      "description": "The FailureHandler class is a Spring component designed to handle access denied scenarios within the application's security context. It implements the AccessDeniedHandler interface, providing a custom response when an authenticated user attempts to access a resource for which they do not have sufficient authorization. Its primary function is to redirect the user to a generic error page, enhancing the user experience by preventing raw access denied errors from being displayed.",
      "methods": [
        {
          "name": "handle",
          "signature": "public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException",
          "description": "This method is invoked by Spring Security when an authenticated user is denied access to a protected resource. It takes the current HTTP request, response, and the AccessDeniedException as parameters. The method's implementation redirects the user to the application's '/error' page, ensuring a consistent and user-friendly error handling mechanism for authorization failures.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.security.access.AccessDeniedException",
        "org.springframework.security.web.access.AccessDeniedHandler",
        "org.springframework.stereotype.Component",
        "javax.persistence.Column",
        "javax.servlet.ServletException",
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse",
        "java.io.IOException"
      ],
      "linesOfCode": 21,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\FailureHandler.java",
      "type": "Component"
    },
    {
      "name": "MvcConfig",
      "description": "This is a Spring configuration class that implements WebMvcConfigurer to customize Spring MVC settings. Its primary purpose is to register view controllers, mapping specific URL paths directly to view names. This allows for simple, static views (like home pages or login pages) to be served without needing explicit controller methods, streamlining the web application setup.",
      "methods": [
        {
          "name": "addViewControllers",
          "signature": "public void addViewControllers(ViewControllerRegistry registry)",
          "description": "Registers view controllers to map URL paths to view names. It configures the root path ('/') and '/home' to resolve to the 'home' view, and '/login' to resolve to the 'login' view. This is typically used for static pages or simple redirects.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.context.annotation.Configuration",
        "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry",
        "org.springframework.web.servlet.config.annotation.ViewControllerRegistry",
        "org.springframework.web.servlet.config.annotation.WebMvcConfigurer"
      ],
      "linesOfCode": 17,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\MvcConfig.java",
      "type": "Configuration"
    },
    {
      "name": "SuccessHandler",
      "description": "This component acts as a custom authentication success handler for Spring Security. After a user successfully authenticates, it inspects the user's granted authorities (roles). Based on the roles, it redirects the user to a specific URL: '/customer' for users with 'ROLE_USER' and '/owner' for users with 'ROLE_ADMIN'. If an unexpected role is encountered, it throws an IllegalStateException. It utilizes Spring's `@Component` annotation for automatic detection and registration as a Spring bean.",
      "methods": [
        {
          "name": "onAuthenticationSuccess",
          "signature": "public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException",
          "description": "This method is invoked by Spring Security immediately after a user successfully authenticates. It retrieves the collection of authorities (roles) associated with the authenticated user. It then iterates through these authorities, performing a conditional redirect: 'ROLE_USER' is redirected to '/customer', and 'ROLE_ADMIN' is redirected to '/owner'. Any other authority will cause an IllegalStateException to be thrown. The redirection is handled by an internal RedirectStrategy.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "org.springframework.security.core.Authentication",
        "org.springframework.security.core.GrantedAuthority",
        "org.springframework.security.web.DefaultRedirectStrategy",
        "org.springframework.security.web.RedirectStrategy",
        "org.springframework.security.web.authentication.AuthenticationSuccessHandler",
        "org.springframework.stereotype.Component",
        "javax.servlet.ServletException",
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse",
        "java.io.IOException",
        "java.util.Collection"
      ],
      "linesOfCode": 45,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\SuccessHandler.java",
      "type": "Component"
    },
    {
      "name": "UserDetailsServiceImpl",
      "description": "This service class implements Spring Security's `UserDetailsService` interface, providing custom logic for loading user-specific data during the authentication process. It attempts to find a user by a given username (which can be an email for customers or a username for staff) across both `CustomerRepository` and `StaffRepository`. If a user is found, it constructs a `UserDetails` object, assigning 'ADMIN' role to staff members and 'USER' role to customers. It dynamically encodes the user's password (staff's actual password or customer's ID) using `BCryptPasswordEncoder` before returning the `UserDetails`.",
      "methods": [
        {
          "name": "loadUserByUsername",
          "signature": "public UserDetails loadUserByUsername(String anyUsername) throws UsernameNotFoundException",
          "description": "Retrieves user details by a given username. It first queries the `CustomerRepository` by email and then the `StaffRepository` by username. If neither a customer nor a staff member is found, it throws a `UsernameNotFoundException`. If a user is found, it builds a Spring Security `User` object. For staff, it encodes their stored password and assigns the 'ADMIN' role. For customers, it encodes their `customerId` as the password and assigns the 'USER' role. A new `BCryptPasswordEncoder` instance is created for each password encoding operation.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "com.sparta.engineering72.sakilaproject.respositories.CustomerRepository",
        "com.sparta.engineering72.sakilaproject.respositories.StaffRepository",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.security.core.userdetails.User",
        "org.springframework.security.core.userdetails.UserDetails",
        "org.springframework.security.core.userdetails.UserDetailsService",
        "org.springframework.security.core.userdetails.UsernameNotFoundException",
        "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
        "org.springframework.stereotype.Service"
      ],
      "linesOfCode": 46,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\UserDetailsServiceImpl.java",
      "type": "Service"
    },
    {
      "name": "WebSecurityConfig",
      "description": "This class is a Spring Security configuration responsible for defining the security rules and authentication mechanisms for the web application. It extends `WebSecurityConfigurerAdapter` to customize web security. Its primary functions include configuring URL authorization (which paths require specific roles or no authentication), setting up a custom login page, handling logout, defining an authentication provider (`DaoAuthenticationProvider`), and providing `UserDetailsService` and `PasswordEncoder` beans. It ensures that different parts of the application are accessible only to authorized users based on their roles.",
      "methods": [
        {
          "name": "configure",
          "signature": "protected void configure(HttpSecurity http) throws Exception",
          "description": "Configures HTTP security for the application. It defines authorization rules for various URL paths, specifying which paths require specific roles (e.g., '/customer' for 'USER', '/owner' for 'ADMIN'), which are publicly accessible (e.g., '/', '/home', '/images/**', '/films/**'), and that all other requests require authentication. It also configures a custom login page ('/login'), a custom success handler after successful login, and an access denied page ('/error').",
          "complexity": "Medium"
        },
        {
          "name": "userDetailsService",
          "signature": "public UserDetailsService userDetailsService()",
          "description": "Defines a `UserDetailsService` bean, which is crucial for loading user-specific data during the authentication process. It returns an instance of `UserDetailsServiceImpl`, which would typically fetch user details from a data source.",
          "complexity": "Low"
        },
        {
          "name": "passwordEncoder",
          "signature": "public PasswordEncoder passwordEncoder()",
          "description": "Defines a `PasswordEncoder` bean, specifically a `BCryptPasswordEncoder`. This encoder is used to securely hash and verify user passwords, preventing them from being stored or transmitted in plain text.",
          "complexity": "Low"
        },
        {
          "name": "authenticationProvider",
          "signature": "public DaoAuthenticationProvider authenticationProvider()",
          "description": "Configures and provides a `DaoAuthenticationProvider` bean. This provider uses the `UserDetailsService` and `PasswordEncoder` defined within this configuration to authenticate users against a data access object (DAO), typically by comparing provided credentials with stored user details.",
          "complexity": "Low"
        },
        {
          "name": "configure",
          "signature": "protected void configure(AuthenticationManagerBuilder auth) throws Exception",
          "description": "Configures the `AuthenticationManager` by registering the custom `DaoAuthenticationProvider`. This tells Spring Security how to authenticate users by delegating the authentication process to the configured provider.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.StaffService",
        "com.sparta.engineering72.sakilaproject.securingweb.SuccessHandler",
        "com.sparta.engineering72.sakilaproject.securingweb.UserDetailsServiceImpl",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.context.annotation.Bean",
        "org.springframework.context.annotation.Configuration",
        "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
        "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder",
        "org.springframework.security.config.annotation.web.builders.HttpSecurity",
        "org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter",
        "org.springframework.security.core.userdetails.UserDetailsService",
        "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
        "org.springframework.security.crypto.password.PasswordEncoder"
      ],
      "linesOfCode": 79,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\WebSecurityConfig.java",
      "type": "Configuration"
    },
    {
      "name": "ActorService",
      "description": "The ActorService class is a Spring service component responsible for encapsulating business logic related to Actor entities. It acts as an intermediary between presentation/controller layers and the data access layer (ActorRepository). Its primary function is to provide various methods for retrieving actor information from the database, such as fetching all actors, an actor by ID, or actors by their first, last, or full name. It leverages the ActorRepository for all data persistence operations.",
      "methods": [
        {
          "name": "ActorService",
          "signature": "public ActorService(ActorRepository actorRepository)",
          "description": "Constructor for ActorService. It uses dependency injection to receive and initialize the ActorRepository, which is essential for data access operations.",
          "complexity": "Low"
        },
        {
          "name": "getAllActors",
          "signature": "public List<Actor> getAllActors()",
          "description": "Retrieves a list of all Actor entities currently stored in the database.",
          "complexity": "Low"
        },
        {
          "name": "getActorByID",
          "signature": "public Actor getActorByID(int id)",
          "description": "Retrieves a single Actor entity from the database based on its unique actor ID.",
          "complexity": "Low"
        },
        {
          "name": "getActorsByFullName",
          "signature": "public List<Actor> getActorsByFullName(String firstName, String lastName)",
          "description": "Retrieves a list of Actor entities whose first name and last name match the provided arguments.",
          "complexity": "Low"
        },
        {
          "name": "getActorsByFirstName",
          "signature": "public List<Actor> getActorsByFirstName(String firstName)",
          "description": "Retrieves a list of Actor entities whose first name matches the provided argument.",
          "complexity": "Low"
        },
        {
          "name": "getActorsByLastName",
          "signature": "public List<Actor> getActorsByLastName(String lastName)",
          "description": "Retrieves a list of Actor entities whose last name matches the provided argument.",
          "complexity": "Low"
        },
        {
          "name": "getActorFullNameFromID",
          "signature": "public String getActorFullNameFromID(Integer id)",
          "description": "Retrieves an Actor by their ID and then constructs their full name by concatenating their first and last names.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.respositories.ActorRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 45,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\ActorService.java",
      "type": "Service"
    },
    {
      "name": "CategoryService",
      "description": "The CategoryService class acts as a service layer component responsible for handling business logic related to Category entities. It provides methods to interact with the CategoryRepository to perform data retrieval operations for categories, serving as an intermediary between the presentation/controller layer and the data access layer.",
      "methods": [
        {
          "name": "CategoryService",
          "signature": "public CategoryService(CategoryRepository categoryRepository)",
          "description": "Constructor for CategoryService. It injects the CategoryRepository dependency, allowing the service to interact with the database for category-related operations.",
          "complexity": "Low"
        },
        {
          "name": "getAllCategories",
          "signature": "public List<Category> getAllCategories()",
          "description": "Retrieves a list of all Category entities available in the database by delegating the call to the CategoryRepository.",
          "complexity": "Low"
        },
        {
          "name": "getByCategoryId",
          "signature": "public Category getByCategoryId(Integer id)",
          "description": "Retrieves a single Category entity based on its unique category ID by delegating the call to the CategoryRepository.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Category",
        "com.sparta.engineering72.sakilaproject.respositories.CategoryRepository",
        "org.springframework.stereotype.Service"
      ],
      "linesOfCode": 27,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\CategoryService.java",
      "type": "Service"
    },
    {
      "name": "CustomerService",
      "description": "The CustomerService class is a Spring service component responsible for encapsulating business logic related to Customer entities. It acts as an intermediary between higher-level components (like controllers) and the CustomerRepository, providing methods for retrieving, saving, and querying customer data. It leverages the CustomerRepository for all data access operations, ensuring a clean separation of concerns.",
      "methods": [
        {
          "name": "CustomerService",
          "signature": "public CustomerService(CustomerRepository customerRepository)",
          "description": "Constructor for CustomerService, injecting the CustomerRepository dependency. This allows the service to interact with the database for customer-related operations.",
          "complexity": "Low"
        },
        {
          "name": "getAllCustomers",
          "signature": "public List<Customer> getAllCustomers()",
          "description": "Retrieves a list of all Customer entities currently stored in the database.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFirstName",
          "signature": "public List<Customer> getCustomersByFirstName(String firstName)",
          "description": "Retrieves a list of Customer entities whose first name matches the provided string.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByLastName",
          "signature": "public List<Customer> getCustomersByLastName(String lastName)",
          "description": "Retrieves a list of Customer entities whose last name matches the provided string.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFullName",
          "signature": "public List<Customer> getCustomersByFullName(String firstName, String lastName)",
          "description": "Retrieves a list of Customer entities whose first name and last name both match the provided strings.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByID",
          "signature": "public Customer getCustomerByID(int id)",
          "description": "Retrieves a single Customer entity by its unique customer ID.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByEmail",
          "signature": "public Customer getCustomerByEmail(String email)",
          "description": "Retrieves a single Customer entity by its email address.",
          "complexity": "Low"
        },
        {
          "name": "save",
          "signature": "public void save(Customer customer)",
          "description": "Saves a Customer entity to the database. If the customer already exists (based on its ID), it will be updated; otherwise, a new customer record will be created.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerCount",
          "signature": "public Integer getCustomerCount()",
          "description": "Retrieves the total number of Customer entities present in the database.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.respositories.CustomerRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 50,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\CustomerService.java",
      "type": "Service"
    },
    {
      "name": "FilmService",
      "description": "A Spring service component that provides business logic and data access operations for Film entities. It acts as an intermediary between controllers and the FilmRepository, offering methods to retrieve, save, and delete film data, as well as query films based on various criteria like title, category, actor, and availability. This service encapsulates the core business logic related to film management within the Sakila project.",
      "methods": [
        {
          "name": "FilmService",
          "signature": "public FilmService(FilmRepository filmRepository)",
          "description": "Constructor for FilmService, responsible for injecting the FilmRepository dependency. This enables the service to interact with the film data layer.",
          "complexity": "Low"
        },
        {
          "name": "getAllFilms",
          "signature": "public List<Film> getAllFilms()",
          "description": "Retrieves a list of all films available in the database by delegating to the FilmRepository.",
          "complexity": "Low"
        },
        {
          "name": "getFilmByID",
          "signature": "public Film getFilmByID(int id)",
          "description": "Retrieves a single film entity from the database based on its unique film ID by delegating to the FilmRepository.",
          "complexity": "Low"
        },
        {
          "name": "getFilmsByTitle",
          "signature": "public List<Film> getFilmsByTitle(String title)",
          "description": "Retrieves a list of films whose titles match the given string, using a repository method for title-based search.",
          "complexity": "Low"
        },
        {
          "name": "getAvailableFilms",
          "signature": "public List<Film> getAvailableFilms()",
          "description": "Retrieves a list of films that are currently marked as available, typically implying they are in stock for rental. This delegates to a custom repository method.",
          "complexity": "Low"
        },
        {
          "name": "getAvailableFilmCount",
          "signature": "public Integer getAvailableFilmCount(Integer id)",
          "description": "Retrieves the count of available copies for a specific film identified by its ID, delegating to a custom repository method.",
          "complexity": "Low"
        },
        {
          "name": "getFilmsByCategory",
          "signature": "public List<Film> getFilmsByCategory(Integer id)",
          "description": "Retrieves a list of films that belong to a specific category, identified by the category's ID. This delegates to a custom repository method.",
          "complexity": "Low"
        },
        {
          "name": "getFilmsByActor",
          "signature": "public List<Film> getFilmsByActor(Integer id)",
          "description": "Retrieves a list of films featuring a specific actor, identified by the actor's ID. This delegates to a custom repository method.",
          "complexity": "Low"
        },
        {
          "name": "save",
          "signature": "public void save(Film film)",
          "description": "Saves a new film entity or updates an existing one in the database. This operation is delegated to the FilmRepository.",
          "complexity": "Low"
        },
        {
          "name": "deleteFilmById",
          "signature": "public void deleteFilmById(int id)",
          "description": "Deletes a film from the database based on its unique film ID. This operation is delegated to the FilmRepository.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.respositories.FilmRepository",
        "org.springframework.stereotype.Service",
        "org.springframework.transaction.annotation.Transactional",
        "java.util.List"
      ],
      "linesOfCode": 57,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\FilmService.java",
      "type": "Service"
    },
    {
      "name": "InventoryService",
      "description": "The InventoryService class is a Spring service component responsible for handling business logic related to inventory management. It acts as an intermediary between controllers and the data access layer (InventoryRepository) to perform operations such as retrieving all inventory items, fetching specific items by ID, deleting items, and getting the total count of inventory items.",
      "methods": [
        {
          "name": "InventoryService",
          "signature": "public InventoryService(InventoryRepository inventoryRepository)",
          "description": "Constructor for InventoryService, injecting the InventoryRepository dependency. This enables the service to interact with the inventory data store.",
          "complexity": "Low"
        },
        {
          "name": "getAllInventory",
          "signature": "public List<Inventory> getAllInventory()",
          "description": "Retrieves a list of all inventory items available in the system.",
          "complexity": "Low"
        },
        {
          "name": "getInventoriesById",
          "signature": "public Inventory getInventoriesById(Integer id)",
          "description": "Retrieves a single inventory item based on its unique inventory ID.",
          "complexity": "Low"
        },
        {
          "name": "deleteInventoryItemById",
          "signature": "public void deleteInventoryItemById(Integer id)",
          "description": "Deletes an inventory item from the system using its unique inventory ID. This operation is transactional, ensuring data consistency.",
          "complexity": "Low"
        },
        {
          "name": "getInventoryCount",
          "signature": "public Integer getInventoryCount()",
          "description": "Retrieves the total number of inventory items currently stored in the system.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.respositories.InventoryRepository",
        "org.springframework.stereotype.Service",
        "org.springframework.transaction.annotation.Transactional",
        "java.util.List"
      ],
      "linesOfCode": 37,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\InventoryService.java",
      "type": "Service"
    },
    {
      "name": "RentalService",
      "description": "The RentalService class is a Spring service component responsible for handling business logic related to rental operations. It interacts with the RentalRepository to perform data access operations for Rental entities, providing functionalities such as retrieving rentals for a specific customer and adding new rental records to the database.",
      "methods": [
        {
          "name": "RentalService",
          "signature": "public RentalService(RentalRepository rentalRepository)",
          "description": "Constructor for RentalService. It injects an instance of RentalRepository, which is used for all data access operations related to rentals.",
          "complexity": "Low"
        },
        {
          "name": "getRentalsByCustomer",
          "signature": "public List<Rental> getRentalsByCustomer(Integer id)",
          "description": "Retrieves a list of all rental records associated with a given customer ID. This method delegates the query directly to the RentalRepository.",
          "complexity": "Low"
        },
        {
          "name": "addRental",
          "signature": "public void addRental(int inventoryId, int customerId, Timestamp returnDate)",
          "description": "Creates a new rental record. It initializes a new Rental object, sets its inventory ID, customer ID, rental date (to the current time), last update timestamp (to the current time), and the provided return date. It also sets a default staff ID of 1 before saving the new rental to the database.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "com.sparta.engineering72.sakilaproject.respositories.RentalRepository",
        "org.springframework.stereotype.Service",
        "java.sql.Timestamp",
        "java.time.LocalDateTime",
        "java.util.List"
      ],
      "linesOfCode": 36,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\RentalService.java",
      "type": "Service"
    },
    {
      "name": "StaffService",
      "description": "The StaffService class is a Spring service component responsible for handling business logic and data operations related to Staff entities. It acts as an intermediary between the presentation/controller layer and the data access layer (StaffRepository), providing methods to retrieve staff information from the database.",
      "methods": [
        {
          "name": "StaffService",
          "signature": "public StaffService(StaffRepository staffRepository)",
          "description": "Constructor for StaffService. It injects an instance of StaffRepository, which is used for all data access operations related to Staff entities.",
          "complexity": "Low"
        },
        {
          "name": "getAllStaff",
          "signature": "public List<Staff> getAllStaff()",
          "description": "Retrieves a list of all Staff entities available in the database. It delegates the call directly to the StaffRepository's findAll method.",
          "complexity": "Low"
        },
        {
          "name": "getStaffByUsername",
          "signature": "public Staff getStaffByUsername(String username)",
          "description": "Retrieves a single Staff entity based on the provided username. It delegates the call to a custom method defined in the StaffRepository.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "com.sparta.engineering72.sakilaproject.respositories.StaffRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 25,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\StaffService.java",
      "type": "Service"
    },
    {
      "name": "MockTests",
      "description": "This Java code segment defines the package and imports for a class. Based on the extensive list of imports, it is clearly a JUnit test class (indicated by `org.junit.*` and `org.mockito.*` imports) within a Spring Boot application (suggested by the `com.sparta.engineering72.sakilaproject` package structure including controllers, entities, repositories, and services, and `org.springframework.ui.ModelMap`). The class is configured to run with MockitoJUnitRunner, indicating it uses Mockito for mocking dependencies during testing. It imports various components related to a 'Sakila project', suggesting it's testing the functionality of a system interacting with a Sakila database. The presence of `BigDecimal`, `Timestamp`, and `Date` imports implies handling of financial, date, and time-related data. No method definitions are present in this specific code snippet. This Java code defines a JUnit test class named `MockTests` that utilizes Mockito for unit testing various components of an application, likely following a multi-layered architecture (Repository, Service, Controller). It sets up `@Spy` instances for multiple repositories and services, and `@InjectMocks` for services and controllers, allowing for partial mocking and dependency injection. The tests primarily focus on verifying the behavior of `ActorController`, `FilmController`, and `CategoryController` methods by mocking their underlying repository calls. However, several tests (`testFilmByDescription`, `testFilms`, `testCategoryByName`, `testCustomerById`, `testCustomer`) directly assert properties of the mocked model objects rather than exercising the controller methods, which deviates from typical unit testing practices where the 'unit under test' (e.g., a controller method) should be invoked and its output verified. The code also contains an incomplete test method `testStaff`. This Java code segment contains a suite of JUnit test methods designed to verify the functionality of various components within a larger application. The tests primarily fall into two categories: 1) Unit tests for custom entity classes (Staff, Inventory, Rental, Category) to ensure their getter/setter methods work correctly, often involving mocking repository calls to control return values. 2) Integration-style tests for Spring MVC controllers (FilmController, CategoryController, ActorController, CustomerController) to verify that their methods return the expected view names, typically by instantiating them with mock service dependencies. The tests utilize Mockito for mocking and JUnit for assertions.",
      "methods": [
        {
          "name": "init",
          "signature": "public void init()",
          "description": "Initializes Mockito annotations for the test class. This method is executed before each test method to set up the @Spy and @InjectMocks fields.",
          "complexity": "Low"
        },
        {
          "name": "testActorById",
          "signature": "public void testActorById()",
          "description": "Tests the `findActorById` method of `ActorController`. It mocks the `actorRepository` to return an `Actor` with ID 10 and asserts that the controller returns an actor with the same ID.",
          "complexity": "Low"
        },
        {
          "name": "testActorByFirstName",
          "signature": "public void testActorByFirstName()",
          "description": "Tests the `findActorById` method of `ActorController`. It mocks the `actorRepository` to return an `Actor` with first name 'Frank' and asserts that the controller returns an actor with that first name.",
          "complexity": "Low"
        },
        {
          "name": "testActorByLastName",
          "signature": "public void testActorByLastName()",
          "description": "Tests the `findActorById` method of `ActorController`. It mocks the `actorRepository` to return an `Actor` with last name 'Gomez' and asserts that the controller returns an actor with that last name.",
          "complexity": "Low"
        },
        {
          "name": "testActorByMore",
          "signature": "public void testActorByMore()",
          "description": "Tests the `findActorById` method of `ActorController`. It mocks the `actorRepository` to return an `Actor` with first name 'Justin' and last name 'Timberlake', asserting both properties.",
          "complexity": "Low"
        },
        {
          "name": "testActorByFullName",
          "signature": "public void testActorByFullName()",
          "description": "Tests the `findActorById` method of `ActorController`. It mocks the `actorRepository` to return an `Actor` with a specific first name, last name, and a timestamp, asserting the timestamp.",
          "complexity": "Low"
        },
        {
          "name": "testFilmByID",
          "signature": "public void testFilmByID()",
          "description": "Tests the `findFilmByID` method of `FilmController`. It mocks the `filmRepository` to return a `Film` with ID 1 and asserts that the controller returns a film with the same ID.",
          "complexity": "Low"
        },
        {
          "name": "testFilmByDescritption",
          "signature": "public void testFilmByDescritption()",
          "description": "Tests the `findFilmByID` method of `FilmController`. It mocks the `filmRepository` to return a `Film` with description 'Horror' and asserts that the controller returns a film with that description. (Note: Method name has a typo 'Descritption').",
          "complexity": "Low"
        },
        {
          "name": "testFilmByRating",
          "signature": "public void testFilmByRating()",
          "description": "Tests the `findFilmByID` method of `FilmController`. It mocks the `filmRepository` to return a `Film` with rating '18' and asserts that the controller returns a film with that rating.",
          "complexity": "Low"
        },
        {
          "name": "testFilmByLength",
          "signature": "public void testFilmByLength()",
          "description": "Tests the `findFilmByID` method of `FilmController`. It mocks the `filmRepository` to return a `Film` with length 200 and asserts that the controller returns a film with that length.",
          "complexity": "Low"
        },
        {
          "name": "testFilmByName",
          "signature": "public void testFilmByName()",
          "description": "Tests the `findFilmByID` method of `FilmController`. It mocks the `filmRepository` to return a `Film` with title 'Goodfellas' and asserts that the controller returns a film with that title.",
          "complexity": "Low"
        },
        {
          "name": "testFilmByDescription",
          "signature": "public void testFilmByDescription()",
          "description": "Tests a `Film` object's description. It mocks the `filmRepository` to return a `Film` with a specific description, then directly asserts the description of the mocked `Film` object without involving the controller's method call.",
          "complexity": "Low"
        },
        {
          "name": "testFilms",
          "signature": "public void testFilms()",
          "description": "Tests various properties of a `Film` object (last update, rental duration, replacement cost, rental rate, release year). It mocks the `filmRepository` to return a `Film` with multiple properties set, then directly asserts these properties on the mocked `Film` object without involving the controller's method call.",
          "complexity": "Low"
        },
        {
          "name": "testCategoryById",
          "signature": "public void testCategoryById()",
          "description": "Tests the `getCategoryById` method of `CategoryController`. It mocks the `categoryRepository` to return a `Category` with ID 10 and asserts that the controller returns a category with the same ID.",
          "complexity": "Low"
        },
        {
          "name": "testCategoryByName",
          "signature": "public void testCategoryByName()",
          "description": "Tests a `Category` object's properties. It mocks the `categoryRepository` to return a `Category` with name 'Category', then directly asserts the ID of the mocked `Category` object without involving the controller's method call. The assertion is on ID, not the name set.",
          "complexity": "Low"
        },
        {
          "name": "testCustomerById",
          "signature": "public void testCustomerById()",
          "description": "Tests a `Customer` object's ID. It mocks the `customerRepository` to return a `Customer` with ID 10, then directly asserts the ID of the mocked `Customer` object without involving any controller method call.",
          "complexity": "Low"
        },
        {
          "name": "testCustomer",
          "signature": "public void testCustomer()",
          "description": "Tests various properties of a `Customer` object (ID, email, create date, first name, last name). It mocks the `customerRepository` to return a `Customer` with multiple properties set, then directly asserts these properties on the mocked `Customer` object without involving any controller method call.",
          "complexity": "Low"
        },
        {
          "name": "testStaff",
          "signature": "public void testStaff()",
          "description": "An incomplete test method that starts by creating a `Timestamp` object. The rest of the method body is missing.",
          "complexity": "Incomplete"
        },
        {
          "name": "testStaff",
          "signature": "public void testStaff()",
          "description": "Tests the Staff entity's getter/setter methods and verifies data integrity after setting properties. It also mocks a call to `staffRepository.getStaffByUsername` to return a pre-configured Staff object and asserts its properties.",
          "complexity": "Medium"
        },
        {
          "name": "testFilmController",
          "signature": "public void testFilmController()",
          "description": "Tests the `getFilmDetails` method of `FilmController`. It instantiates the controller with mock services and asserts that the method returns the expected view name 'films/filmDetails'.",
          "complexity": "Low"
        },
        {
          "name": "testFilmController2",
          "signature": "public void testFilmController2()",
          "description": "Tests the `getFilms` method of `FilmController`. It instantiates the controller with mock services and asserts that the method returns the expected view name '/films/films' when a filter is applied.",
          "complexity": "Low"
        },
        {
          "name": "testCategory",
          "signature": "public void testCategory()",
          "description": "Tests the `getCategoryDetails` method of `CategoryController`. It instantiates the controller with mock services and asserts that the method returns the expected view name 'categories/categoryDetails'.",
          "complexity": "Low"
        },
        {
          "name": "testCategory2",
          "signature": "public void testCategory2()",
          "description": "Tests the `getCategories` method of `CategoryController`. It instantiates the controller with mock services and asserts that the method returns the expected view name '/categories/categories'.",
          "complexity": "Low"
        },
        {
          "name": "testActorController1",
          "signature": "public void testActorController1()",
          "description": "Tests the `getActors` method of `ActorController`. It instantiates the controller with mock services and asserts that the method returns the expected view name 'actors/actors'.",
          "complexity": "Low"
        },
        {
          "name": "testCustomerController",
          "signature": "public void testCustomerController()",
          "description": "Tests the `getCustomers` method of `CustomerController`. It instantiates the controller with mock services and asserts that the method returns the expected view name 'owner/customers'.",
          "complexity": "Low"
        },
        {
          "name": "testCustomerController2",
          "signature": "public void testCustomerController2()",
          "description": "Tests the `showUsersRentalHistory` method of `CustomerController`. It instantiates the controller with mock services and asserts that the method returns the expected view name 'owner/customerDetails'.",
          "complexity": "Low"
        },
        {
          "name": "testInventory",
          "signature": "public void testInventory()",
          "description": "Tests the Inventory entity's getter/setter methods and verifies data integrity. It also mocks a call to `inventoryRepository.getInventoriesByInventoryId` to return a pre-configured Inventory object and asserts its properties.",
          "complexity": "Medium"
        },
        {
          "name": "testRental",
          "signature": "public void testRental()",
          "description": "Tests the Rental entity's getter/setter methods and verifies data integrity. It also mocks a call to `rentalRepository.getRentalByRentalId` to return a pre-configured Rental object and asserts its properties.",
          "complexity": "Medium"
        },
        {
          "name": "testCategoryByTimeStamp",
          "signature": "public void testCategoryByTimeStamp()",
          "description": "Tests the Category entity's `lastUpdate` property. It mocks a call to `categoryRepository.getCategoryByCategoryId` to return a pre-configured Category object and asserts its `lastUpdate` property.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.example.service.CategoryService",
        "org.junit.Test",
        "com.example.controller.FilmController",
        "com.sparta.engineering72.sakilaproject.controller.FilmController",
        "com.example.model.Actor",
        "java.math.BigDecimal",
        "com.example.model.Category",
        "com.example.repository.StaffRepository",
        "com.example.repository.CategoryRepository",
        "java.util.Date",
        "com.sparta.engineering72.sakilaproject.controller.CategoryController",
        "java.sql.Timestamp",
        "com.sparta.engineering72.sakilaproject.controller.CustomerController",
        "static org.mockito.Mockito.when",
        "com.example.model.Customer",
        "com.example.repository.RentalRepository",
        "com.example.service.ActorService",
        "com.example.repository.ActorRepository",
        "com.example.service.InventoryService",
        "org.junit.Assert.assertEquals",
        "org.junit.runner.RunWith",
        "org.mockito.Spy",
        "com.example.controller.CustomerController",
        "com.example.model.FilmActor",
        "com.example.model.Film",
        "com.example.repository.CustomerRepository",
        "org.junit.Before",
        "com.example.controller.CategoryController",
        "org.mockito.Mockito.when",
        "com.sparta.engineering72.sakilaproject.controller.ActorController",
        "com.sparta.engineering72.sakilaproject.services.*",
        "org.mockito.MockitoAnnotations",
        "static org.mockito.Mockito.verify",
        "com.example.service.RentalService",
        "com.example.repository.FilmRepository",
        "org.springframework.ui.ModelMap",
        "com.sparta.engineering72.sakilaproject.entities.*",
        "com.example.repository.InventoryRepository",
        "com.sparta.engineering72.sakilaproject.respositories.*",
        "com.example.model.Inventory",
        "com.example.controller.ActorController",
        "com.example.service.CustomerService",
        "com.example.model.Rental",
        "org.mockito.junit.MockitoJUnitRunner",
        "static org.junit.Assert.assertEquals",
        "com.example.model.Staff",
        "org.mockito.InjectMocks",
        "com.example.service.FilmService",
        "static org.junit.jupiter.api.Assertions.assertEquals"
      ],
      "linesOfCode": 410,
      "filePath": ".\\sakila-java\\src\\test\\java\\com\\sparta\\engineering72\\sakilaproject\\MockTests.java",
      "type": "Util"
    },
    {
      "name": "SakilaProjectApplicationTests",
      "description": "This class contains unit tests for the `MainController` of the Sakila Project application. It utilizes JUnit to verify that specific methods within the `MainController` return their expected string values, ensuring basic functionality for 'home', 'account', and 'login' endpoints.",
      "methods": [
        {
          "name": "MainController1",
          "signature": "public void MainController1()",
          "description": "Tests the `home()` method of `MainController` to ensure it correctly returns the string \"home\".",
          "complexity": "Low"
        },
        {
          "name": "MainController2",
          "signature": "public void MainController2()",
          "description": "Tests the `account()` method of `MainController` to ensure it correctly returns the string \"account\".",
          "complexity": "Low"
        },
        {
          "name": "MainController3",
          "signature": "public void MainController3()",
          "description": "Tests the `login()` method of `MainController` to ensure it correctly returns the string \"login\".",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.controller.MainController",
        "org.junit.Test",
        "org.junit.jupiter.api.Assertions.assertEquals"
      ],
      "linesOfCode": 33,
      "filePath": ".\\sakila-java\\src\\test\\java\\com\\sparta\\engineering72\\sakilaproject\\SakilaProjectApplicationTests.java",
      "type": "Util"
    }
  ],
  "metadata": {
    "llmProvider": "Gemini",
    "totalFiles": 42,
    "totalModules": 42
  }
}