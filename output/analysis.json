{
  "projectOverview": "This is a Spring Boot web application designed to interact with the Sakila database. It employs a multi-tier architecture, using Spring MVC controllers to handle web requests and expose endpoints for various entities like Actors, Categories, and Films. Data persistence is managed through JPA entities that map directly to the Sakila database tables.",
  "modules": [
    {
      "name": "MavenWrapperDownloader",
      "description": "This utility class is responsible for downloading the `maven-wrapper.jar` file. It first attempts to locate and read a `maven-wrapper.properties` file to check for a custom download URL. If a custom URL is not provided or the properties file doesn't exist, it defaults to a predefined Maven repository URL. The class ensures the target directory for the JAR file exists, creates it if necessary, and then proceeds to download the file. It also supports basic HTTP authentication for the download process via environment variables (`MVNW_USERNAME` and `MVNW_PASSWORD`). The main method orchestrates this download process, taking the base directory as a command-line argument.",
      "methods": [
        {
          "name": "main",
          "signature": "public static void main(String args[])",
          "description": "The entry point of the MavenWrapperDownloader application. It initializes the base directory from command-line arguments, reads the `maven-wrapper.properties` file to determine the download URL (using a default if no custom URL is found), creates the necessary output directory, and then calls `downloadFileFromURL` to fetch the `maven-wrapper.jar`. It includes error handling for file operations and download failures, printing status messages to the console and exiting with an appropriate status code.",
          "complexity": "Medium"
        },
        {
          "name": "downloadFileFromURL",
          "signature": "private static void downloadFileFromURL(String urlString, File destination) throws Exception",
          "description": "Downloads a file from a specified URL to a given destination file. It checks for `MVNW_USERNAME` and `MVNW_PASSWORD` environment variables to configure basic HTTP authentication if credentials are provided. It uses `java.nio.channels` for efficient byte transfer from the URL's input stream to the destination file's output stream, ensuring resources are properly closed.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "java.net.URL",
        "java.net.Authenticator",
        "java.net.PasswordAuthentication",
        "java.io.File",
        "java.io.FileInputStream",
        "java.io.FileOutputStream",
        "java.io.IOException",
        "java.nio.channels.ReadableByteChannel",
        "java.nio.channels.Channels",
        "java.util.Properties"
      ],
      "linesOfCode": 119,
      "filePath": ".\\sakila-java\\.mvn\\wrapper\\MavenWrapperDownloader.java",
      "type": "Util"
    },
    {
      "name": "SakilaProjectApplication",
      "description": "This class serves as the main entry point for the Sakila Project Spring Boot application. Annotated with `@SpringBootApplication`, it enables auto-configuration, component scanning, and defines the application's main method to bootstrap and run the Spring Boot application context.",
      "methods": [
        {
          "name": "main",
          "signature": "public static void main(String[] args)",
          "description": "This is the standard entry point for the Java application. It calls `SpringApplication.run()` to start the Spring Boot application, initializing the Spring context and launching any embedded web servers or other components defined in the application.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.boot.SpringApplication",
        "org.springframework.boot.autoconfigure.SpringBootApplication"
      ],
      "linesOfCode": 14,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\SakilaProjectApplication.java",
      "type": "Util"
    },
    {
      "name": "ActorController",
      "description": "The ActorController is a Spring MVC controller responsible for handling web requests related to actor information within the Sakila project. It provides endpoints for retrieving lists of actors, filtering them by first and/or last name, and fetching detailed filmography for a specific actor. It leverages ActorService and FilmService to interact with the underlying data.",
      "methods": [
        {
          "name": "ActorController",
          "signature": "public ActorController(FilmService filmService, ActorService actorService)",
          "description": "Constructor for ActorController, automatically wired by Spring to inject instances of FilmService and ActorService for dependency management.",
          "complexity": "Low"
        },
        {
          "name": "getActors",
          "signature": "public String getActors(ModelMap modelMap, @RequestParam(value = \"firstName\", defaultValue = \"ALL ACTORS\") String firstNameFilter, @RequestParam(value = \"lastName\", defaultValue = \"ALL ACTORS\") String lastNameFilter)",
          "description": "Handles GET requests to the '/actors' endpoint. It retrieves a list of actors based on optional first name and last name filters. If no specific filters are provided (or default 'ALL ACTORS' is used), it fetches all actors. Otherwise, it filters by first name, last name, or both. The filtered actors and a complete list of all actors are added to the ModelMap, and the 'actors/actors' view is returned.",
          "complexity": "Medium"
        },
        {
          "name": "getActorFilmDetails",
          "signature": "public String getActorFilmDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id)",
          "description": "Handles GET requests to the '/actors/details' endpoint. It retrieves the full name of a specific actor and a list of films they have appeared in, based on the provided actor ID. This information is added to the ModelMap, and the 'actors/actorDetails' view is returned.",
          "complexity": "Low"
        },
        {
          "name": "findActorById",
          "signature": "public Actor findActorById(Integer id)",
          "description": "Retrieves a single Actor entity from the ActorService based on its unique identifier (ID).",
          "complexity": "Low"
        },
        {
          "name": "getActorFullNameFromID",
          "signature": "public String getActorFullNameFromID(Integer id)",
          "description": "Retrieves an Actor entity by its ID and constructs their full name by concatenating their first and last names.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.services.ActorService",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "org.springframework.web.bind.annotation.RequestParam",
        "java.util.List"
      ],
      "linesOfCode": 62,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\ActorController.java",
      "type": "Controller"
    },
    {
      "name": "CategoryController",
      "description": "This is a Spring MVC controller responsible for handling web requests related to categories in the Sakila project. It provides endpoints to retrieve a list of all categories and to view details for a specific category, including the films associated with it. It interacts with `CategoryService` and `FilmService` to fetch data and prepares it for display in views.",
      "methods": [
        {
          "name": "CategoryController",
          "signature": "public CategoryController(FilmService filmService, CategoryService categoryService)",
          "description": "Constructor for `CategoryController`. It injects instances of `FilmService` and `CategoryService` using Spring's dependency injection mechanism, making them available for use within the controller.",
          "complexity": "Low"
        },
        {
          "name": "getCategories",
          "signature": "public String getCategories(ModelMap modelMap)",
          "description": "Handles GET requests to the `/categories` endpoint. It retrieves all available categories from the `CategoryService` and adds them to the `ModelMap` under the attribute name 'allCategories'. It then returns the logical view name 'categories/categories' to be resolved by the view resolver.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryDetails",
          "signature": "public String getCategoryDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id)",
          "description": "Handles GET requests to the `/categories/details` endpoint. It expects a 'id' request parameter to identify the category. It retrieves the specific category by ID using `CategoryService` and also fetches all films associated with that category using `FilmService`. Both the category and its films are added to the `ModelMap` under 'category' and 'films' attributes respectively. It then returns the logical view name 'categories/categoryDetails'.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryById",
          "signature": "public Category getCategoryById(Integer id)",
          "description": "Retrieves a `Category` object by its unique identifier (ID) using the `CategoryService`. This method is not directly exposed as a web endpoint but can be used internally by other components or services if needed.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Category",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "com.sparta.engineering72.sakilaproject.services.CategoryService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "org.springframework.web.bind.annotation.RequestParam"
      ],
      "linesOfCode": 41,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\CategoryController.java",
      "type": "Controller"
    },
    {
      "name": "CustomerController",
      "description": "The CustomerController is a Spring MVC controller responsible for handling web requests related to customer information and their rental history. It provides endpoints for both authenticated customers to view their own rental details and for administrative 'owner' users to manage and view all customer data, including filtering capabilities and detailed rental histories for specific customers. It orchestrates data retrieval from various service layers (CustomerService, RentalService, InventoryService, FilmService) to build comprehensive views for the UI.",
      "methods": [
        {
          "name": "CustomerController",
          "signature": "public CustomerController(CustomerService customerService, RentalService rentalService, InventoryService inventoryService, FilmService filmService)",
          "description": "Constructor for CustomerController. It uses Spring's @Autowired to inject instances of CustomerService, RentalService, InventoryService, and FilmService, which are required for the controller's operations.",
          "complexity": "Low"
        },
        {
          "name": "currentUser",
          "signature": "public String currentUser(ModelMap modelMap, HttpServletRequest request)",
          "description": "Handles GET requests to '/customer'. This method retrieves the email of the currently authenticated user from the HttpServletRequest, fetches the corresponding customer details, and then compiles a list of all rental orders associated with that customer. For each rental, it retrieves the inventory and film details to create an 'Order' object. The customer details and their order history are then added to the ModelMap for rendering on the 'customer/customer' view.",
          "complexity": "Medium"
        },
        {
          "name": "getCustomers",
          "signature": "public String getCustomers(ModelMap modelMap, @RequestParam(value = \"firstName\", defaultValue = \"ALL CUSTOMERS\") String firstNameFilter, @RequestParam(value = \"lastName\", defaultValue = \"ALL CUSTOMERS\") String lastNameFilter)",
          "description": "Handles GET requests to '/owner/customers'. This endpoint allows an owner/admin to view a list of all customers. It supports optional filtering by first name, last name, or both, using @RequestParam. Based on the provided filters, it delegates to the CustomerService to retrieve the appropriate list of customers. It adds both the filtered customer list and a list of all customers to the ModelMap for rendering on the 'owner/customers' view.",
          "complexity": "Medium"
        },
        {
          "name": "showUsersRentalHistory",
          "signature": "public String showUsersRentalHistory(ModelMap modelMap, @PathVariable(name = \"id\") int id)",
          "description": "Handles GET requests to '/owner/view/customers/{id}'. This method allows an owner/admin to view the detailed rental history for a specific customer, identified by their ID via a @PathVariable. It retrieves the customer details, then fetches all their rentals. For each rental, it retrieves the associated inventory and film details to construct an 'Order' object, similar to the 'currentUser' method. The compiled order history and customer details are added to the ModelMap for rendering on the 'owner/customerDetails' view.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.entities.Order",
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "com.sparta.engineering72.sakilaproject.services.InventoryService",
        "com.sparta.engineering72.sakilaproject.services.RentalService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "org.springframework.web.bind.annotation.PathVariable",
        "org.springframework.web.bind.annotation.RequestParam",
        "javax.servlet.http.HttpServletRequest",
        "java.util.ArrayList",
        "java.util.List"
      ],
      "linesOfCode": 104,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\CustomerController.java",
      "type": "Controller"
    },
    {
      "name": "FilmController",
      "description": "The FilmController is a Spring MVC controller responsible for handling web requests related to film management and rental operations within the Sakila project. It provides endpoints for displaying films, showing film details, facilitating film rentals for customers, and offering administrative functionalities for managing films (e.g., viewing film counts, editing, and deleting films). It orchestrates interactions between the web layer and various service layers (FilmService, InventoryService, RentalService, CustomerService) to perform its business logic.",
      "methods": [
        {
          "name": "FilmController",
          "signature": "public FilmController(FilmService filmService, InventoryService inventoryService, RentalService rentalService, CustomerService customerService)",
          "description": "Constructor for FilmController, injecting required service dependencies (FilmService, InventoryService, RentalService, CustomerService) via Spring's @Autowired mechanism.",
          "complexity": "Low"
        },
        {
          "name": "getFilms",
          "signature": "public String getFilms(ModelMap modelMap, @RequestParam(value = \"title\", defaultValue = \"ALL FILMS\") String filter)",
          "description": "Handles GET requests to '/films'. It retrieves a list of films, either all films or filtered by a specific title, and adds them along with available films to the ModelMap for rendering on the 'films' view.",
          "complexity": "Low"
        },
        {
          "name": "getFilmDetails",
          "signature": "public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \"id\") Integer id)",
          "description": "Handles GET requests to '/films/details'. It fetches the details of a specific film by its ID, determines its availability, and adds both the film details and availability status to the ModelMap for display on the 'filmDetails' view.",
          "complexity": "Low"
        },
        {
          "name": "rentFilm",
          "signature": "public String rentFilm(ModelMap modelMap, Principal principal, @PathVariable(\"filmid\") int filmid)",
          "description": "Handles GET requests to '/rent/{filmid}'. It allows a logged-in customer (identified by Principal) to rent a specific film. It finds an available inventory item for the film, records a new rental with a calculated return date, and then redirects to the '/films' page.",
          "complexity": "Medium"
        },
        {
          "name": "getFilmDetails",
          "signature": "public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \"title\", defaultValue = \"ALL FILMS\") String filter)",
          "description": "Handles GET requests to '/owner/manage-films'. This method is for administrative purposes, allowing owners to manage films. It retrieves films (all or filtered by title) and calculates the count of available copies for each film, adding this information to the ModelMap for display on the 'manage-films' view.",
          "complexity": "Medium"
        },
        {
          "name": "showEditProductPage",
          "signature": "public ModelAndView showEditProductPage(@PathVariable(name = \"id\") int id)",
          "description": "Handles requests to '/edit/{id}'. It retrieves a film by its ID and prepares a ModelAndView object to display an edit form for that specific film.",
          "complexity": "Low"
        },
        {
          "name": "deleteProduct",
          "signature": "public String deleteProduct(@PathVariable(name = \"id\") int id)",
          "description": "Handles requests to '/delete/{id}'. It deletes a film from the database using its ID and then redirects the user to the film management page.",
          "complexity": "Low"
        },
        {
          "name": "findFilmByID",
          "signature": "public Film findFilmByID(Integer id)",
          "description": "A helper method to retrieve a Film object by its unique identifier. It delegates the call to the FilmService.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.FilmService",
        "com.sparta.engineering72.sakilaproject.services.InventoryService",
        "com.sparta.engineering72.sakilaproject.services.RentalService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.transaction.annotation.Transactional",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "org.springframework.web.bind.annotation.PathVariable",
        "org.springframework.web.bind.annotation.RequestMapping",
        "org.springframework.web.bind.annotation.RequestParam",
        "javax.persistence.criteria.CriteriaBuilder",
        "java.security.Principal",
        "java.sql.Timestamp",
        "java.time.LocalDateTime",
        "java.util.ArrayList",
        "java.util.HashMap",
        "org.springframework.ui.Model",
        "org.springframework.web.servlet.ModelAndView",
        "java.time.Instant",
        "java.time.LocalDate",
        "java.util.List"
      ],
      "linesOfCode": 138,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\FilmController.java",
      "type": "Controller"
    },
    {
      "name": "MainController",
      "description": "This is a Spring MVC Controller responsible for handling basic web requests and mapping them to corresponding view names. It provides endpoints for the application's home page, login page, and account page, returning the logical view names for each.",
      "methods": [
        {
          "name": "home",
          "signature": "public String home()",
          "description": "Handles GET requests to the root URL ('/') and returns the logical view name 'home'. This typically renders the application's main landing page.",
          "complexity": "Low"
        },
        {
          "name": "login",
          "signature": "public String login()",
          "description": "Handles GET requests to the '/login' URL and returns the logical view name 'login'. This is used to display the application's login form.",
          "complexity": "Low"
        },
        {
          "name": "account",
          "signature": "public String account()",
          "description": "Handles GET requests to the '/account' URL and returns the logical view name 'account'. This typically displays a user's account details or a related page.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.web.bind.annotation.RequestMapping",
        "org.springframework.stereotype.Controller"
      ],
      "linesOfCode": 25,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\MainController.java",
      "type": "Controller"
    },
    {
      "name": "StaffController",
      "description": "This is a Spring MVC Controller responsible for handling web requests related to staff operations, particularly for an 'owner' role. It retrieves information about the currently logged-in staff member, along with aggregated counts of customers and inventory, and prepares this data for display in a view.",
      "methods": [
        {
          "name": "StaffController",
          "signature": "public StaffController(StaffService staffService, CustomerService customerService, InventoryService inventoryService)",
          "description": "Constructor for StaffController, injecting required service dependencies (StaffService, CustomerService, and InventoryService) for data retrieval and business logic.",
          "complexity": "Low"
        },
        {
          "name": "currentUser",
          "signature": "public String currentUser(ModelMap modelMap, HttpServletRequest request)",
          "description": "Handles GET requests to the '/owner' endpoint. It retrieves the username of the currently authenticated user from the HttpServletRequest, fetches the corresponding Staff entity, and then obtains the total count of customers and inventory items. All this data (staff details, customer count, inventory count) is added to the ModelMap to be accessible by the view, and then returns the logical view name '/owner/owner'.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.InventoryService",
        "com.sparta.engineering72.sakilaproject.services.StaffService",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Controller",
        "org.springframework.ui.ModelMap",
        "org.springframework.web.bind.annotation.GetMapping",
        "javax.servlet.http.HttpServletRequest"
      ],
      "linesOfCode": 38,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\controller\\StaffController.java",
      "type": "Controller"
    },
    {
      "name": "Actor",
      "description": "The Actor class is a JPA (Java Persistence API) entity that models the 'actor' table in the Sakila database. It serves as a data model for actor information, including their unique ID, first name, last name, and the timestamp of their last update. It provides standard getter and setter methods for its properties and overrides `equals()` and `hashCode()` for proper object comparison and collection management.",
      "methods": [
        {
          "name": "getActorId",
          "signature": "public int getActorId()",
          "description": "Retrieves the unique identifier for the actor. This field is designated as the primary key for the entity and maps to the 'actor_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setActorId",
          "signature": "public void setActorId(int actorId)",
          "description": "Sets the unique identifier for the actor.",
          "complexity": "Low"
        },
        {
          "name": "getFirstName",
          "signature": "public String getFirstName()",
          "description": "Retrieves the first name of the actor. This field maps to the 'first_name' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setFirstName",
          "signature": "public void setFirstName(String firstName)",
          "description": "Sets the first name of the actor.",
          "complexity": "Low"
        },
        {
          "name": "getLastName",
          "signature": "public String getLastName()",
          "description": "Retrieves the last name of the actor. This field maps to the 'last_name' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setLastName",
          "signature": "public void setLastName(String lastName)",
          "description": "Sets the last name of the actor.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update made to the actor's record. This field maps to the 'last_update' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update for the actor's record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Actor object with the specified object for equality. Two Actor objects are considered equal if their 'actorId', 'firstName', 'lastName', and 'lastUpdate' fields are all equal.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Actor object based on its 'actorId', 'firstName', 'lastName', and 'lastUpdate' fields. This method is essential for efficient storage and retrieval in hash-based collections.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.sql.Timestamp",
        "java.util.Collection",
        "java.util.Objects"
      ],
      "linesOfCode": 72,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Actor.java",
      "type": "Model"
    },
    {
      "name": "Category",
      "description": "Represents a category entity in the Sakila database, mapping to the 'category' table. It stores information such as the category's unique ID, name, and last update timestamp, and is used for persistence operations with JPA. This class defines the structure and behavior of a category record within the application's data model.",
      "methods": [
        {
          "name": "getCategoryId",
          "signature": "public int getCategoryId()",
          "description": "Retrieves the unique identifier for the category. This method is annotated with @Id and @Column, indicating it's the primary key mapping to the 'category_id' column.",
          "complexity": "Low"
        },
        {
          "name": "setCategoryId",
          "signature": "public void setCategoryId(int categoryId)",
          "description": "Sets the unique identifier for the category.",
          "complexity": "Low"
        },
        {
          "name": "getName",
          "signature": "public String getName()",
          "description": "Retrieves the name of the category. This method is annotated with @Basic and @Column, mapping to the 'name' column.",
          "complexity": "Low"
        },
        {
          "name": "setName",
          "signature": "public void setName(String name)",
          "description": "Sets the name of the category.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update to the category record. This method is annotated with @Basic and @Column, mapping to the 'last_update' column.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update to the category record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Category object with another object for equality. Equality is determined by comparing the categoryId, name, and lastUpdate fields.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Category object based on its categoryId, name, and lastUpdate fields, consistent with the equals method.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 60,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Category.java",
      "type": "Model"
    },
    {
      "name": "Customer",
      "description": "This class serves as a JPA (Java Persistence API) entity, mapping to the 'customer' table in a relational database. It represents a customer record within the Sakila project, holding attributes such as customer ID, first name, last name, email, active status, creation date, and last update timestamp. It provides standard getter and setter methods for all its properties, and overrides `equals()` and `hashCode()` methods to ensure proper object comparison and functionality in collections.",
      "methods": [
        {
          "name": "getCustomerId",
          "signature": "public int getCustomerId()",
          "description": "Returns the unique identifier for the customer. This field is designated as the primary key and maps to the 'customer_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setCustomerId",
          "signature": "public void setCustomerId(int customerId)",
          "description": "Sets the unique identifier for the customer.",
          "complexity": "Low"
        },
        {
          "name": "getFirstName",
          "signature": "public String getFirstName()",
          "description": "Returns the first name of the customer. This field maps to the 'first_name' column.",
          "complexity": "Low"
        },
        {
          "name": "setFirstName",
          "signature": "public void setFirstName(String firstName)",
          "description": "Sets the first name of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getLastName",
          "signature": "public String getLastName()",
          "description": "Returns the last name of the customer. This field maps to the 'last_name' column.",
          "complexity": "Low"
        },
        {
          "name": "setLastName",
          "signature": "public void setLastName(String lastName)",
          "description": "Sets the last name of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getEmail",
          "signature": "public String getEmail()",
          "description": "Returns the email address of the customer. This field maps to the 'email' column.",
          "complexity": "Low"
        },
        {
          "name": "setEmail",
          "signature": "public void setEmail(String email)",
          "description": "Sets the email address of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getActive",
          "signature": "public byte getActive()",
          "description": "Returns the active status of the customer (e.g., 0 for inactive, 1 for active). This field maps to the 'active' column.",
          "complexity": "Low"
        },
        {
          "name": "setActive",
          "signature": "public void setActive(byte active)",
          "description": "Sets the active status of the customer.",
          "complexity": "Low"
        },
        {
          "name": "getCreateDate",
          "signature": "public java.sql.Timestamp getCreateDate()",
          "description": "Returns the timestamp indicating when the customer record was created. This field maps to the 'create_date' column.",
          "complexity": "Low"
        },
        {
          "name": "setCreateDate",
          "signature": "public void setCreateDate(java.sql.Timestamp createDate)",
          "description": "Sets the timestamp for when the customer record was created.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp indicating the last time the customer record was updated. This field maps to the 'last_update' column.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp for the last update to the customer record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Customer object with another object for equality. It returns true if the objects are the same instance or if they are both Customer objects with identical values for all persistent fields (customerId, firstName, lastName, email, active, createDate, lastUpdate).",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Customer object based on the values of its persistent fields (customerId, firstName, lastName, email, active, createDate, lastUpdate).",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Basic",
        "javax.persistence.Column",
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 109,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Customer.java",
      "type": "Model"
    },
    {
      "name": "Film",
      "description": "The Film class is a JPA (Java Persistence API) entity that models the 'film' table in a relational database, specifically for a Sakila-like project. It defines the structure and attributes of a film, including its unique identifier (`filmId`), title, description, release year, rental duration, rental rate, length, replacement cost, rating, special features, and the timestamp of its last update. The class uses annotations like `@Entity`, `@Id`, `@Column`, and `@Basic` to map its properties to corresponding database columns. It provides standard getter and setter methods for all its attributes, enabling data access and modification. Additionally, it overrides the `equals()` and `hashCode()` methods to ensure proper object comparison and functionality when used in collections, which is crucial for entity classes.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the unique identifier of the film.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the unique identifier of the film.",
          "complexity": "Low"
        },
        {
          "name": "getTitle",
          "signature": "public String getTitle()",
          "description": "Returns the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "setTitle",
          "signature": "public void setTitle(String title)",
          "description": "Sets the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "getDescription",
          "signature": "public String getDescription()",
          "description": "Returns the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "setDescription",
          "signature": "public void setDescription(String description)",
          "description": "Sets the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "getReleaseYear",
          "signature": "public int getReleaseYear()",
          "description": "Returns the release year of the film.",
          "complexity": "Low"
        },
        {
          "name": "setReleaseYear",
          "signature": "public void setReleaseYear(int releaseYear)",
          "description": "Sets the release year of the film.",
          "complexity": "Low"
        },
        {
          "name": "getRentalDuration",
          "signature": "public Integer getRentalDuration()",
          "description": "Returns the rental duration of the film in days.",
          "complexity": "Low"
        },
        {
          "name": "setRentalDuration",
          "signature": "public void setRentalDuration(Integer rentalDuration)",
          "description": "Sets the rental duration of the film in days.",
          "complexity": "Low"
        },
        {
          "name": "getRentalRate",
          "signature": "public BigDecimal getRentalRate()",
          "description": "Returns the rental rate of the film.",
          "complexity": "Low"
        },
        {
          "name": "setRentalRate",
          "signature": "public void setRentalRate(BigDecimal rentalRate)",
          "description": "Sets the rental rate of the film.",
          "complexity": "Low"
        },
        {
          "name": "getLength",
          "signature": "public Integer getLength()",
          "description": "Returns the length of the film in minutes.",
          "complexity": "Low"
        },
        {
          "name": "setLength",
          "signature": "public void setLength(Integer length)",
          "description": "Sets the length of the film in minutes.",
          "complexity": "Low"
        },
        {
          "name": "getReplacementCost",
          "signature": "public BigDecimal getReplacementCost()",
          "description": "Returns the replacement cost of the film.",
          "complexity": "Low"
        },
        {
          "name": "setReplacementCost",
          "signature": "public void setReplacementCost(BigDecimal replacementCost)",
          "description": "Sets the replacement cost of the film.",
          "complexity": "Low"
        },
        {
          "name": "getRating",
          "signature": "public String getRating()",
          "description": "Returns the rating of the film (e.g., G, PG, R).",
          "complexity": "Low"
        },
        {
          "name": "setRating",
          "signature": "public void setRating(String rating)",
          "description": "Sets the rating of the film.",
          "complexity": "Low"
        },
        {
          "name": "getSpecialFeatures",
          "signature": "public String getSpecialFeatures()",
          "description": "Returns a string listing special features of the film.",
          "complexity": "Low"
        },
        {
          "name": "setSpecialFeatures",
          "signature": "public void setSpecialFeatures(String specialFeatures)",
          "description": "Sets the special features of the film.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update to the film record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update to the film record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Film object with another object for equality based on all its properties. Returns true if the objects are identical or if all corresponding properties are equal.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Film object based on all its properties, suitable for use in hash-based collections.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "org.springframework.format.annotation.DateTimeFormat",
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.math.BigDecimal",
        "java.sql.Timestamp",
        "java.time.LocalDate",
        "java.util.Objects"
      ],
      "linesOfCode": 158,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Film.java",
      "type": "Model"
    },
    {
      "name": "FilmActor",
      "description": "This class is a JPA entity representing the `film_actor` table in the `sakila` database. It models the many-to-many relationship between `Film` and `Actor` entities, acting as a join table with a composite primary key. It holds `actorId`, `filmId`, and `lastUpdate` fields, and uses `FilmActorPK` as its composite primary key class. It provides standard getters, setters, and overrides `equals()` and `hashCode()` for proper object comparison and collection usage.",
      "methods": [
        {
          "name": "getActorId",
          "signature": "public int getActorId()",
          "description": "Returns the ID of the actor, which is part of the composite primary key for this association.",
          "complexity": "Low"
        },
        {
          "name": "setActorId",
          "signature": "public void setActorId(int actorId)",
          "description": "Sets the ID of the actor.",
          "complexity": "Low"
        },
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the ID of the film, which is part of the composite primary key for this association.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the ID of the film.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp indicating when this film-actor association record was last updated.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp for the last update of this film-actor association record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(java.lang.Object o)",
          "description": "Compares this `FilmActor` object with another object for equality. Two `FilmActor` objects are considered equal if their `actorId`, `filmId`, and `lastUpdate` fields are equivalent.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this `FilmActor` object based on its `actorId`, `filmId`, and `lastUpdate` fields, consistent with the `equals` method.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence",
        "java.sql.Timestamp",
        "java.util.Objects",
        "com.sparta.engineering72.sakilaproject.entities.FilmActorPK"
      ],
      "linesOfCode": 61,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmActor.java",
      "type": "Model"
    },
    {
      "name": "FilmActorPK",
      "description": "This class represents the composite primary key for the FilmActor entity in a JPA (Java Persistence API) context. It holds the actorId and filmId, which together uniquely identify a record in a many-to-many relationship between films and actors. It implements Serializable, as required for embeddable primary keys in JPA, and provides standard getters, setters, and correctly overridden equals() and hashCode() methods, which are crucial for the proper functioning of composite keys in collections and database interactions.",
      "methods": [
        {
          "name": "getActorId",
          "signature": "public Integer getActorId()",
          "description": "Returns the unique identifier for the actor. This method is annotated with @Column and @Id, indicating it's part of the composite primary key and maps to the 'actor_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setActorId",
          "signature": "public void setActorId(int actorId)",
          "description": "Sets the unique identifier for the actor.",
          "complexity": "Low"
        },
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the unique identifier for the film. This method is annotated with @Column and @Id, indicating it's part of the composite primary key and maps to the 'film_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the unique identifier for the film.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this FilmActorPK object with another object for equality. Two FilmActorPK objects are considered equal if their actorId and filmId values are identical. This override is essential for correct behavior of composite keys in collections and JPA.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Computes a hash code for this FilmActorPK object based on its actorId and filmId. This override is essential for consistency with the equals() method and for proper functioning in hash-based collections.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Column",
        "javax.persistence.Id",
        "java.io.Serializable",
        "java.util.Objects"
      ],
      "linesOfCode": 46,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmActorPK.java",
      "type": "Util"
    },
    {
      "name": "FilmCategory",
      "description": "FilmCategory is a JPA entity representing the 'film_category' table in the 'sakila' database. It models the many-to-many relationship between films and categories. This class uses a composite primary key, FilmCategoryPK, to uniquely identify each film-category association. It includes fields for film ID, category ID, and a timestamp for the last update.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Retrieves the ID of the film, which is part of the composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(Integer filmId)",
          "description": "Sets the ID of the film.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryId",
          "signature": "public int getCategoryId()",
          "description": "Retrieves the ID of the category, which is part of the composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setCategoryId",
          "signature": "public void setCategoryId(Integer categoryId)",
          "description": "Sets the ID of the category.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Retrieves the timestamp of the last update for this film-category association.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update for this film-category association.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this FilmCategory object with another object for equality based on its filmId, categoryId, and lastUpdate fields. This is a standard overridden method for object comparison.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this FilmCategory object based on its filmId, categoryId, and lastUpdate fields. This is a standard overridden method for hash code generation.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.*",
        "java.sql.Timestamp",
        "java.util.Objects",
        "com.sparta.engineering72.sakilaproject.entities.FilmCategoryPK"
      ],
      "linesOfCode": 61,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmCategory.java",
      "type": "Model"
    },
    {
      "name": "FilmCategoryPK",
      "description": "This class represents a composite primary key for the `FilmCategory` entity in a JPA context. It is designed to be embedded or used as an `@IdClass` to uniquely identify a specific relationship between a film and a category. It combines `filmId` and `categoryId` as its constituent parts. The class implements `Serializable`, which is a requirement for composite primary keys in JPA, and correctly overrides the `equals` and `hashCode` methods to ensure proper object comparison and hashing, which are crucial for the correct functioning of primary key objects within collections and persistence contexts.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the unique identifier for the film, which is one component of this composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the unique identifier for the film, updating one component of this composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "getCategoryId",
          "signature": "public int getCategoryId()",
          "description": "Returns the unique identifier for the category, which is the other component of this composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "setCategoryId",
          "signature": "public void setCategoryId(int categoryId)",
          "description": "Sets the unique identifier for the category, updating the other component of this composite primary key.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this `FilmCategoryPK` object with another object for equality. It returns true if the other object is also a `FilmCategoryPK` and both its `filmId` and `categoryId` match those of this object. This method is crucial for proper functioning of composite primary keys in JPA.",
          "complexity": "Low"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this `FilmCategoryPK` object based on its `filmId` and `categoryId`. This method is essential for consistent hashing and proper functioning of composite primary keys in hash-based collections.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Column",
        "javax.persistence.Id",
        "java.io.Serializable",
        "java.util.Objects"
      ],
      "linesOfCode": 46,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmCategoryPK.java",
      "type": "Util"
    },
    {
      "name": "FilmText",
      "description": "This class represents the 'film_text' table in the Sakila database, acting as a JPA entity. It stores textual information about a film, including its unique identifier, title, and a brief description. It provides standard getters and setters for its properties and overrides `equals()` and `hashCode()` for proper object comparison and use in collections.",
      "methods": [
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the unique identifier for the film.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the unique identifier for the film.",
          "complexity": "Low"
        },
        {
          "name": "getTitle",
          "signature": "public String getTitle()",
          "description": "Returns the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "setTitle",
          "signature": "public void setTitle(String title)",
          "description": "Sets the title of the film.",
          "complexity": "Low"
        },
        {
          "name": "getDescription",
          "signature": "public String getDescription()",
          "description": "Returns the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "setDescription",
          "signature": "public void setDescription(String description)",
          "description": "Sets the description of the film.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this FilmText object with the specified object for equality. It considers filmId, title, and description for comparison.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Returns a hash code value for the FilmText object, consistent with the equals method, based on filmId, title, and description.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "javax.persistence.Entity",
        "javax.persistence.Table",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.util.Objects"
      ],
      "linesOfCode": 58,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\FilmText.java",
      "type": "Model"
    },
    {
      "name": "Inventory",
      "description": "The Inventory class is a JPA (Java Persistence API) entity that models an inventory item within the Sakila project. It represents a record in the 'inventory' database table, storing information such as a unique inventory identifier, the ID of the film it corresponds to, and the timestamp of its last update. It provides standard getter and setter methods for its properties, along with overridden 'equals' and 'hashCode' methods for proper object comparison and use in collections.",
      "methods": [
        {
          "name": "getInventoryId",
          "signature": "public int getInventoryId()",
          "description": "Returns the unique identifier for this inventory item. This field is annotated as the primary key ('@Id') and mapped to the 'inventory_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setInventoryId",
          "signature": "public void setInventoryId(int inventoryId)",
          "description": "Sets the unique identifier for this inventory item.",
          "complexity": "Low"
        },
        {
          "name": "getFilmId",
          "signature": "public int getFilmId()",
          "description": "Returns the ID of the film associated with this inventory item. This field is mapped to the 'film_id' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setFilmId",
          "signature": "public void setFilmId(int filmId)",
          "description": "Sets the ID of the film associated with this inventory item.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update for this inventory item. This field is mapped to the 'last_update' column in the database.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update for this inventory item.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(java.lang.Object o)",
          "description": "Compares this Inventory object with another object for equality. It returns true if the objects are the same instance, or if they are both Inventory objects with the same 'inventoryId' and 'lastUpdate' values.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Inventory object based on its 'inventoryId' and 'lastUpdate' fields, ensuring consistency with the 'equals' method.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "javax.persistence.Column",
        "javax.persistence.Basic",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 56,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Inventory.java",
      "type": "Model"
    },
    {
      "name": "Order",
      "description": "The Order class is a simple Plain Old Java Object (POJO) that represents a composite order entity. It aggregates information by linking a specific Customer, a Film, and a Rental record. This class serves as a data structure to hold these related entities together, likely for tracking or processing an order within the Sakila project context.",
      "methods": [
        {
          "name": "Order",
          "signature": "public Order(Customer customer, Film film, Rental rental)",
          "description": "Constructor for the Order class. Initializes a new Order object with the provided Customer, Film, and Rental instances.",
          "complexity": "Low"
        },
        {
          "name": "getCustomer",
          "signature": "public Customer getCustomer()",
          "description": "Returns the Customer associated with this order.",
          "complexity": "Low"
        },
        {
          "name": "setCustomer",
          "signature": "public void setCustomer(Customer customer)",
          "description": "Sets the Customer for this order.",
          "complexity": "Low"
        },
        {
          "name": "getFilm",
          "signature": "public Film getFilm()",
          "description": "Returns the Film associated with this order.",
          "complexity": "Low"
        },
        {
          "name": "setFilm",
          "signature": "public void setFilm(Film film)",
          "description": "Sets the Film for this order.",
          "complexity": "Low"
        },
        {
          "name": "getRental",
          "signature": "public Rental getRental()",
          "description": "Returns the Rental record associated with this order.",
          "complexity": "Low"
        },
        {
          "name": "setRental",
          "signature": "public void setRental(Rental rental)",
          "description": "Sets the Rental record for this order.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "Customer",
        "Film",
        "Rental"
      ],
      "linesOfCode": 38,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Order.java",
      "type": "Util"
    },
    {
      "name": "Rental",
      "description": "The Rental class is a JPA entity representing a rental transaction in the Sakila database. It models the data structure for a rental record, including details such as the unique rental identifier, rental and return dates, and associated IDs for inventory, customer, and staff. It provides standard getter and setter methods for all its properties and overrides `equals()` and `hashCode()` for proper object comparison and collection management.",
      "methods": [
        {
          "name": "getRentalId",
          "signature": "public int getRentalId()",
          "description": "Returns the unique identifier for this rental record.",
          "complexity": "Low"
        },
        {
          "name": "setRentalId",
          "signature": "public void setRentalId(int rentalId)",
          "description": "Sets the unique identifier for this rental record.",
          "complexity": "Low"
        },
        {
          "name": "getRentalDate",
          "signature": "public java.sql.Timestamp getRentalDate()",
          "description": "Returns the timestamp indicating when the rental officially started.",
          "complexity": "Low"
        },
        {
          "name": "setRentalDate",
          "signature": "public void setRentalDate(java.sql.Timestamp rentalDate)",
          "description": "Sets the timestamp indicating when the rental officially started.",
          "complexity": "Low"
        },
        {
          "name": "getInventoryId",
          "signature": "public int getInventoryId()",
          "description": "Returns the identifier of the inventory item that was rented.",
          "complexity": "Low"
        },
        {
          "name": "setInventoryId",
          "signature": "public void setInventoryId(int inventoryId)",
          "description": "Sets the identifier of the inventory item that was rented.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerId",
          "signature": "public int getCustomerId()",
          "description": "Returns the identifier of the customer who made the rental.",
          "complexity": "Low"
        },
        {
          "name": "setCustomerId",
          "signature": "public void setCustomerId(int customerId)",
          "description": "Sets the identifier of the customer who made the rental.",
          "complexity": "Low"
        },
        {
          "name": "getReturnDate",
          "signature": "public java.sql.Timestamp getReturnDate()",
          "description": "Returns the timestamp indicating when the rented item was returned.",
          "complexity": "Low"
        },
        {
          "name": "setReturnDate",
          "signature": "public void setReturnDate(java.sql.Timestamp returnDate)",
          "description": "Sets the timestamp indicating when the rented item was returned.",
          "complexity": "Low"
        },
        {
          "name": "getStaffId",
          "signature": "public int getStaffId()",
          "description": "Returns the identifier of the staff member who processed the rental.",
          "complexity": "Low"
        },
        {
          "name": "setStaffId",
          "signature": "public void setStaffId(int staffId)",
          "description": "Sets the identifier of the staff member who processed the rental.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public java.sql.Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update made to this rental record.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(java.sql.Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update made to this rental record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Rental object with another object for equality. Two Rental objects are considered equal if all their corresponding fields (rentalId, inventoryId, customerId, staffId, rentalDate, returnDate, and lastUpdate) are equal.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code for this Rental object based on all its significant fields (rentalId, inventoryId, customerId, staffId, rentalDate, returnDate, and lastUpdate).",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "javax.persistence.*",
        "java.sql.Timestamp",
        "java.util.Objects"
      ],
      "linesOfCode": 107,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Rental.java",
      "type": "Model"
    },
    {
      "name": "Staff",
      "description": "The Staff class is a JPA (Java Persistence API) entity that maps to the 'staff' table in a relational database, typically part of a Sakila project. It serves as a model for staff member data, encapsulating properties such as staff ID, first name, last name, picture, email, active status, username, password, and the last update timestamp. It provides standard getter and setter methods for all its properties, enabling data access and modification. The class also overrides the `equals` and `hashCode` methods to ensure proper object comparison and hashing, which is essential for correct functioning within collections and ORM frameworks like JPA.",
      "methods": [
        {
          "name": "getStaffId",
          "signature": "public int getStaffId()",
          "description": "Returns the unique identifier for the staff member. This method is annotated with `@Id` and `@Column(name = \"staff_id\")`, marking it as the primary key of the entity.",
          "complexity": "Low"
        },
        {
          "name": "setStaffId",
          "signature": "public void setStaffId(int staffId)",
          "description": "Sets the unique identifier for the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getFirstName",
          "signature": "public String getFirstName()",
          "description": "Returns the first name of the staff member. This method is annotated with `@Basic` and `@Column(name = \"first_name\")`.",
          "complexity": "Low"
        },
        {
          "name": "setFirstName",
          "signature": "public void setFirstName(String firstName)",
          "description": "Sets the first name of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getLastName",
          "signature": "public String getLastName()",
          "description": "Returns the last name of the staff member. This method is annotated with `@Basic` and `@Column(name = \"last_name\")`.",
          "complexity": "Low"
        },
        {
          "name": "setLastName",
          "signature": "public void setLastName(String lastName)",
          "description": "Sets the last name of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getPicture",
          "signature": "public byte[] getPicture()",
          "description": "Returns the staff member's picture as a byte array. This method is annotated with `@Basic` and `@Column(name = \"picture\")`.",
          "complexity": "Low"
        },
        {
          "name": "setPicture",
          "signature": "public void setPicture(byte[] picture)",
          "description": "Sets the staff member's picture.",
          "complexity": "Low"
        },
        {
          "name": "getEmail",
          "signature": "public String getEmail()",
          "description": "Returns the email address of the staff member. This method is annotated with `@Basic` and `@Column(name = \"email\")`.",
          "complexity": "Low"
        },
        {
          "name": "setEmail",
          "signature": "public void setEmail(String email)",
          "description": "Sets the email address of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getActive",
          "signature": "public byte getActive()",
          "description": "Returns the active status of the staff member (e.g., 0 for inactive, 1 for active). This method is annotated with `@Basic` and `@Column(name = \"active\")`.",
          "complexity": "Low"
        },
        {
          "name": "setActive",
          "signature": "public void setActive(byte active)",
          "description": "Sets the active status of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getUsername",
          "signature": "public String getUsername()",
          "description": "Returns the username of the staff member. This method is annotated with `@Basic` and `@Column(name = \"username\")`.",
          "complexity": "Low"
        },
        {
          "name": "setUsername",
          "signature": "public void setUsername(String username)",
          "description": "Sets the username of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getPassword",
          "signature": "public String getPassword()",
          "description": "Returns the password of the staff member. This method is annotated with `@Basic` and `@Column(name = \"password\")`.",
          "complexity": "Low"
        },
        {
          "name": "setPassword",
          "signature": "public void setPassword(String password)",
          "description": "Sets the password of the staff member.",
          "complexity": "Low"
        },
        {
          "name": "getLastUpdate",
          "signature": "public Timestamp getLastUpdate()",
          "description": "Returns the timestamp of the last update for the staff record. This method is annotated with `@Basic` and `@Column(name = \"last_update\")`.",
          "complexity": "Low"
        },
        {
          "name": "setLastUpdate",
          "signature": "public void setLastUpdate(Timestamp lastUpdate)",
          "description": "Sets the timestamp of the last update for the staff record.",
          "complexity": "Low"
        },
        {
          "name": "equals",
          "signature": "public boolean equals(Object o)",
          "description": "Compares this Staff object with the specified object for equality. It performs checks for identity, nullity, and class type, then compares all significant fields (staffId, active, firstName, lastName, picture, email, username, password, lastUpdate) using `Objects.equals` for nullable objects and `Arrays.equals` for the byte array.",
          "complexity": "Medium"
        },
        {
          "name": "hashCode",
          "signature": "public int hashCode()",
          "description": "Generates a hash code value for the Staff object. It computes a hash based on all significant fields (staffId, firstName, lastName, email, active, username, password, lastUpdate) using `Objects.hash` and combines it with the hash of the `picture` byte array using `Arrays.hashCode`.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "javax.persistence.Basic",
        "javax.persistence.Column",
        "javax.persistence.Entity",
        "javax.persistence.Id",
        "java.sql.Timestamp",
        "java.util.Arrays",
        "java.util.Objects"
      ],
      "linesOfCode": 136,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\entities\\Staff.java",
      "type": "Model"
    },
    {
      "name": "ActorRepository",
      "description": "The ActorRepository interface acts as a Data Access Object (DAO) for the Actor entity. It extends Spring Data JPA's JpaRepository, providing standard CRUD (Create, Read, Update, Delete) operations for Actor objects without requiring explicit implementation. Additionally, it defines custom query methods based on Spring Data JPA's naming conventions to retrieve actors by their first name, last name, or a combination of both, and to fetch a single actor by their unique ID.",
      "methods": [
        {
          "name": "findActorsByFirstNameAndLastName",
          "signature": "List<Actor> findActorsByFirstNameAndLastName(String firstName, String lastName)",
          "description": "Retrieves a list of Actor entities whose first name matches the provided 'firstName' and last name matches the provided 'lastName'.",
          "complexity": "Low"
        },
        {
          "name": "findActorsByFirstName",
          "signature": "List<Actor> findActorsByFirstName(String firstName)",
          "description": "Retrieves a list of Actor entities whose first name matches the provided 'firstName'.",
          "complexity": "Low"
        },
        {
          "name": "findActorsByLastName",
          "signature": "List<Actor> findActorsByLastName(String lastName)",
          "description": "Retrieves a list of Actor entities whose last name matches the provided 'lastName'.",
          "complexity": "Low"
        },
        {
          "name": "getActorByActorId",
          "signature": "Actor getActorByActorId(Integer id)",
          "description": "Retrieves a single Actor entity by its unique identifier, 'actorId'.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 16,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\ActorRepository.java",
      "type": "DAO"
    },
    {
      "name": "CategoryRepository",
      "description": "This is a Spring Data JPA repository interface responsible for data access operations related to the `Category` entity. By extending `JpaRepository`, it inherits a comprehensive set of standard CRUD (Create, Read, Update, Delete) operations, as well as capabilities for pagination and sorting for `Category` entities, identified by an `Integer` primary key. It also defines a custom query method to retrieve a `Category` by its specific ID.",
      "methods": [
        {
          "name": "getCategoryByCategoryId",
          "signature": "Category getCategoryByCategoryId(Integer id)",
          "description": "Retrieves a single `Category` entity from the database. The lookup is performed based on the provided `id`, which corresponds to the `categoryId` field of the `Category` entity. This method leverages Spring Data JPA's query derivation mechanism, where the method name automatically translates into the appropriate database query.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Category",
        "org.springframework.data.jpa.repository.JpaRepository",
        "java.util.List"
      ],
      "linesOfCode": 11,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\CategoryRepository.java",
      "type": "DAO"
    },
    {
      "name": "CustomerRepository",
      "description": "The CustomerRepository interface serves as a Data Access Object (DAO) for the Customer entity within the Sakila project. It extends Spring Data JPA's JpaRepository, providing standard CRUD (Create, Read, Update, Delete) operations for Customer objects without explicit implementation. Additionally, it defines several custom query methods using both Spring Data JPA's query derivation from method names and native SQL queries via the @Query annotation, enabling specific data retrieval based on customer attributes like email, name, and ID, as well as retrieving the total customer count. Its primary purpose is to abstract database interactions for customer data, offering a clean and maintainable API for service layers.",
      "methods": [
        {
          "name": "getCustomerByCredentials",
          "signature": "Customer getCustomerByCredentials(String username, Integer password)",
          "description": "Retrieves a single Customer entity based on a provided email (mapped to 'username') and customer ID (mapped to 'password') using a native SQL query. Note: The parameter name 'password' is misleading as it maps to 'customer_id' in the database.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByUsername",
          "signature": "Customer getCustomerByUsername(String username)",
          "description": "Retrieves a single Customer entity based on their email address (mapped to 'username') using a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFirstName",
          "signature": "List<Customer> getCustomersByFirstName(String firstName)",
          "description": "Retrieves a list of Customer entities whose first name matches the provided 'firstName' using a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByLastName",
          "signature": "List<Customer> getCustomersByLastName(String lastName)",
          "description": "Retrieves a list of Customer entities whose last name matches the provided 'lastName' using a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFullName",
          "signature": "List<Customer> getCustomersByFullName(String firstName, String lastName)",
          "description": "Retrieves a list of Customer entities whose first name and last name both match the provided 'firstName' and 'lastName' using a native SQL query.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByCustomerId",
          "signature": "Customer getCustomerByCustomerId(Integer id)",
          "description": "Retrieves a single Customer entity based on their unique customer ID. This method leverages Spring Data JPA's query derivation from the method name.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByEmail",
          "signature": "Customer getCustomerByEmail(String email)",
          "description": "Retrieves a single Customer entity based on their email address. This method leverages Spring Data JPA's query derivation from the method name.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerCount",
          "signature": "Integer getCustomerCount()",
          "description": "Retrieves the total count of all Customer entities in the database using a native SQL query.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 37,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\CustomerRepository.java",
      "type": "DAO"
    },
    {
      "name": "FilmRepository",
      "description": "This interface serves as a Data Access Object (DAO) for the Film entity within the Sakila project. It extends Spring Data JPA's JpaRepository, providing standard CRUD operations for Film entities and custom query methods to retrieve film-related data based on various criteria such as availability, category, actor, and title. It interacts directly with the database to fetch and manage film records.",
      "methods": [
        {
          "name": "getAvailableFilmCount",
          "signature": "Integer getAvailableFilmCount(Integer id)",
          "description": "Retrieves the count of available copies for a specific film, identified by its unique film ID, by joining the 'film' and 'inventory' tables.",
          "complexity": "Low"
        },
        {
          "name": "getAvailableFilms",
          "signature": "List<Film> getAvailableFilms()",
          "description": "Retrieves a list of all films that are currently available in the inventory, by joining the 'film' and 'inventory' tables.",
          "complexity": "Low"
        },
        {
          "name": "getAllFilmsByCategory",
          "signature": "List<Film> getAllFilmsByCategory(Integer categoryId)",
          "description": "Retrieves a list of all films belonging to a specific category, identified by its unique category ID, by joining 'film', 'film_category', and 'category' tables.",
          "complexity": "Low"
        },
        {
          "name": "getAllFilmsByActor",
          "signature": "List<Film> getAllFilmsByActor(Integer actorId)",
          "description": "Retrieves a list of all films featuring a specific actor, identified by their unique actor ID, by joining 'actor', 'film_actor', and 'film' tables.",
          "complexity": "Low"
        },
        {
          "name": "findByTitle",
          "signature": "List<Film> findByTitle(String title)",
          "description": "Retrieves a list of films whose title exactly matches the provided string. This method leverages Spring Data JPA's query derivation from the method name.",
          "complexity": "Low"
        },
        {
          "name": "getFilmByFilmId",
          "signature": "Film getFilmByFilmId(Integer id)",
          "description": "Retrieves a single film entity by its unique film ID. This method leverages Spring Data JPA's query derivation from the method name.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.FilmActor",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 34,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\FilmRepository.java",
      "type": "DAO"
    },
    {
      "name": "InventoryRepository",
      "description": "The InventoryRepository interface serves as a Data Access Object (DAO) for the Inventory entity. It extends Spring Data JPA's JpaRepository, providing standard CRUD (Create, Read, Update, Delete) operations for Inventory objects. Additionally, it defines custom queries to retrieve specific inventory details, delete inventory records by film ID, and count the total number of inventory items in the database. It interacts directly with the 'inventory' and 'rental' tables in the underlying database.",
      "methods": [
        {
          "name": "getInventoriesByInventoryId",
          "signature": "Inventory getInventoriesByInventoryId(Integer inventoryId)",
          "description": "Retrieves a single Inventory entity, along with its associated Rental information, by a given inventory ID. The method executes a native SQL query that performs an inner join between the 'inventory' and 'rental' tables.",
          "complexity": "Low"
        },
        {
          "name": "deleteInventoryByInventoryId",
          "signature": "void deleteInventoryByInventoryId(@Param(\"id\") Integer id)",
          "description": "Deletes Inventory entities from the database based on a provided film ID. This is a modifying operation, indicated by the @Modifying annotation, and executes a native SQL DELETE query.",
          "complexity": "Low"
        },
        {
          "name": "getInventoryCount",
          "signature": "Integer getInventoryCount()",
          "description": "Retrieves the total count of all Inventory records currently stored in the database. It executes a native SQL COUNT query.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Modifying",
        "org.springframework.data.jpa.repository.Query",
        "org.springframework.data.repository.query.Param",
        "java.util.List"
      ],
      "linesOfCode": 27,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\InventoryRepository.java",
      "type": "DAO"
    },
    {
      "name": "RentalRepository",
      "description": "This is a Spring Data JPA repository interface responsible for providing data access operations for the `Rental` entity. It extends `JpaRepository`, inheriting standard CRUD (Create, Read, Update, Delete) functionalities, and defines custom query methods to retrieve rental data based on specific criteria, such as rental ID or customer ID.",
      "methods": [
        {
          "name": "getRentalByRentalId",
          "signature": "Rental getRentalByRentalId(Integer id)",
          "description": "Retrieves a single `Rental` entity from the database based on its unique primary key, `rentalId`. This method leverages Spring Data JPA's derived query capabilities.",
          "complexity": "Low"
        },
        {
          "name": "getRentalByCustomerId",
          "signature": "List<Rental> getRentalByCustomerId(Integer customerId)",
          "description": "Retrieves a list of `Rental` entities associated with a specific `Customer` ID. This method uses a custom native SQL query that performs an INNER JOIN between the `rental` and `customer` tables to filter rentals by the provided customer ID.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query",
        "java.util.List"
      ],
      "linesOfCode": 17,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\RentalRepository.java",
      "type": "DAO"
    },
    {
      "name": "StaffRepository",
      "description": "StaffRepository is a Spring Data JPA repository interface responsible for managing `Staff` entities in the Sakila database project. It extends `JpaRepository`, providing standard CRUD (Create, Read, Update, Delete) operations for `Staff` objects, and includes a custom method to retrieve staff members by their username using a native SQL query.",
      "methods": [
        {
          "name": "getStaffByUsername",
          "signature": "Staff getStaffByUsername(String username)",
          "description": "This method executes a native SQL query to find and return a `Staff` entity whose `username` matches the provided `username` parameter.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "org.springframework.data.jpa.repository.JpaRepository",
        "org.springframework.data.jpa.repository.Query"
      ],
      "linesOfCode": 16,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\respositories\\StaffRepository.java",
      "type": "DAO"
    },
    {
      "name": "FailureHandler",
      "description": "This class is a Spring component designed to handle access denied scenarios within a Spring Security application. It implements the `AccessDeniedHandler` interface, providing a custom mechanism to redirect users to a designated error page (e.g., `/error`) when they attempt to access resources for which they lack the necessary authorization. This ensures a consistent and user-friendly experience for authorization failures.",
      "methods": [
        {
          "name": "handle",
          "signature": "public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException",
          "description": "This method is invoked by Spring Security when an authenticated user attempts to access a protected resource but is denied access due to insufficient authorization. It redirects the user's browser to the application's `/error` path, providing a custom error handling experience for access denied situations.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.security.access.AccessDeniedException",
        "org.springframework.security.web.access.AccessDeniedHandler",
        "org.springframework.stereotype.Component",
        "javax.servlet.ServletException",
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse",
        "java.io.IOException"
      ],
      "linesOfCode": 21,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\FailureHandler.java",
      "type": "Component"
    },
    {
      "name": "MvcConfig",
      "description": "The `MvcConfig` class is a Spring `@Configuration` component that implements the `WebMvcConfigurer` interface. Its primary function is to customize Spring MVC settings, specifically by registering view controllers. It maps specific URL paths such as the root (`/`), `/home`, and `/login` directly to corresponding view names (\"home\" and \"login\"). This configuration simplifies routing for static or simple pages, eliminating the need for explicit controller methods for these basic mappings. It is typically used in web applications to set up default landing pages and login forms.",
      "methods": [
        {
          "name": "addViewControllers",
          "signature": "public void addViewControllers(ViewControllerRegistry registry)",
          "description": "This method, part of the `WebMvcConfigurer` interface, is used to register simple view controllers. It configures direct mappings from URL paths to view names. Specifically, it maps the root path (`/`) and `/home` to the \"home\" view, and `/login` to the \"login\" view. This allows the application to serve these views without requiring a dedicated controller method.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "org.springframework.context.annotation.Configuration",
        "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry",
        "org.springframework.web.servlet.config.annotation.ViewControllerRegistry",
        "org.springframework.web.servlet.config.annotation.WebMvcConfigurer"
      ],
      "linesOfCode": 17,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\MvcConfig.java",
      "type": "Configuration"
    },
    {
      "name": "SuccessHandler",
      "description": "This class is a Spring Component that implements Spring Security's AuthenticationSuccessHandler. Its primary function is to handle successful user authentication events by redirecting the user to a specific page based on their assigned roles. Users with 'ROLE_USER' are redirected to '/customer', while users with 'ROLE_ADMIN' are redirected to '/owner'.",
      "methods": [
        {
          "name": "onAuthenticationSuccess",
          "signature": "public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException",
          "description": "This method is invoked by Spring Security after a user has successfully authenticated. It retrieves the authenticated user's authorities (roles) and iterates through them. Based on the first matched role ('ROLE_USER' or 'ROLE_ADMIN'), it redirects the user to the appropriate URL. If an unrecognized role is encountered, an IllegalStateException is thrown. Basic exception handling is included for the redirect operation.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "org.springframework.security.core.Authentication",
        "org.springframework.security.core.GrantedAuthority",
        "org.springframework.security.web.DefaultRedirectStrategy",
        "org.springframework.security.web.RedirectStrategy",
        "org.springframework.security.web.authentication.AuthenticationSuccessHandler",
        "org.springframework.stereotype.Component",
        "javax.servlet.ServletException",
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse",
        "java.io.IOException",
        "java.util.Collection"
      ],
      "linesOfCode": 45,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\SuccessHandler.java",
      "type": "Component"
    },
    {
      "name": "UserDetailsServiceImpl",
      "description": "This service class implements Spring Security's UserDetailsService interface. Its primary function is to load user-specific data (either a Customer or Staff member) based on a provided username (which can be an email for customers or a username for staff). It queries both customer and staff repositories, assigns appropriate roles ('ADMIN' for staff, 'USER' for customers), encodes passwords using BCryptPasswordEncoder, and constructs a Spring Security UserDetails object for authentication. If no user is found, it throws a UsernameNotFoundException.",
      "methods": [
        {
          "name": "loadUserByUsername",
          "signature": "public UserDetails loadUserByUsername(String anyUsername) throws UsernameNotFoundException",
          "description": "Attempts to find a user by the given username. It first tries to find a customer by email and then a staff member by username. If a user is found, it creates a Spring Security UserDetails object, assigning 'ADMIN' role to staff and 'USER' role to customers, and encodes their password. If neither a customer nor a staff member is found, it throws a UsernameNotFoundException.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "com.sparta.engineering72.sakilaproject.respositories.CustomerRepository",
        "com.sparta.engineering72.sakilaproject.respositories.StaffRepository",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.security.core.userdetails.User",
        "org.springframework.security.core.userdetails.UserDetails",
        "org.springframework.security.core.userdetails.UserDetailsService",
        "org.springframework.security.core.userdetails.UsernameNotFoundException",
        "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
        "org.springframework.stereotype.Service"
      ],
      "linesOfCode": 46,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\UserDetailsServiceImpl.java",
      "type": "Service"
    },
    {
      "name": "WebSecurityConfig",
      "description": "This class is a Spring Security configuration responsible for defining the security rules and authentication mechanisms for the web application. It extends WebSecurityConfigurerAdapter to customize HTTP security, including URL authorization, form-based login, logout, and access denied handling. It also configures the UserDetailsService, PasswordEncoder, and DaoAuthenticationProvider for user authentication.",
      "methods": [
        {
          "name": "configure",
          "signature": "protected void configure(HttpSecurity http) throws Exception",
          "description": "Configures HTTP security for the application. It defines which URL paths require specific roles ('USER', 'ADMIN'), which paths are publicly accessible, sets up a custom login page and success handler, and configures logout functionality and an access denied page.",
          "complexity": "Medium"
        },
        {
          "name": "userDetailsService",
          "signature": "public UserDetailsService userDetailsService()",
          "description": "Provides a UserDetailsService bean, which is crucial for Spring Security to load user-specific data during the authentication process. It returns an instance of UserDetailsServiceImpl.",
          "complexity": "Low"
        },
        {
          "name": "passwordEncoder",
          "signature": "public PasswordEncoder passwordEncoder()",
          "description": "Provides a PasswordEncoder bean, specifically a BCryptPasswordEncoder, which is used for securely hashing and verifying user passwords.",
          "complexity": "Low"
        },
        {
          "name": "authenticationProvider",
          "signature": "public DaoAuthenticationProvider authenticationProvider()",
          "description": "Configures and provides a DaoAuthenticationProvider bean. This provider uses the configured UserDetailsService and PasswordEncoder to authenticate users against a data access object (DAO).",
          "complexity": "Low"
        },
        {
          "name": "configure",
          "signature": "protected void configure(AuthenticationManagerBuilder auth) throws Exception",
          "description": "Configures the AuthenticationManagerBuilder by adding the custom DaoAuthenticationProvider, enabling it to handle user authentication requests.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.services.CustomerService",
        "com.sparta.engineering72.sakilaproject.services.StaffService",
        "com.sparta.engineering72.sakilaproject.securingweb.SuccessHandler",
        "com.sparta.engineering72.sakilaproject.securingweb.UserDetailsServiceImpl",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.context.annotation.Bean",
        "org.springframework.context.annotation.Configuration",
        "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
        "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder",
        "org.springframework.security.config.annotation.web.builders.HttpSecurity",
        "org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter",
        "org.springframework.security.core.userdetails.UserDetailsService",
        "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
        "org.springframework.security.crypto.password.PasswordEncoder"
      ],
      "linesOfCode": 79,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\securingweb\\WebSecurityConfig.java",
      "type": "Configuration"
    },
    {
      "name": "ActorService",
      "description": "The ActorService class is a Spring service component responsible for handling business logic related to Actor entities. It acts as an intermediary between the presentation/controller layer and the data access layer (ActorRepository), providing methods to retrieve actor data based on various criteria such as ID, full name, first name, or last name. It also includes utility methods like constructing an actor's full name.",
      "methods": [
        {
          "name": "ActorService",
          "signature": "public ActorService(ActorRepository actorRepository)",
          "description": "Constructor for ActorService, responsible for injecting the ActorRepository dependency to enable data access operations.",
          "complexity": "Low"
        },
        {
          "name": "getAllActors",
          "signature": "public List<Actor> getAllActors()",
          "description": "Retrieves a list of all Actor entities available in the database.",
          "complexity": "Low"
        },
        {
          "name": "getActorByID",
          "signature": "public Actor getActorByID(int id)",
          "description": "Retrieves a single Actor entity from the database based on its unique actor ID.",
          "complexity": "Low"
        },
        {
          "name": "getActorsByFullName",
          "signature": "public List<Actor> getActorsByFullName(String firstName, String lastName)",
          "description": "Retrieves a list of Actor entities that match both the provided first name and last name.",
          "complexity": "Low"
        },
        {
          "name": "getActorsByFirstName",
          "signature": "public List<Actor> getActorsByFirstName(String firstName)",
          "description": "Retrieves a list of Actor entities that match the provided first name.",
          "complexity": "Low"
        },
        {
          "name": "getActorsByLastName",
          "signature": "public List<Actor> getActorsByLastName(String lastName)",
          "description": "Retrieves a list of Actor entities that match the provided last name.",
          "complexity": "Low"
        },
        {
          "name": "getActorFullNameFromID",
          "signature": "public String getActorFullNameFromID(Integer id)",
          "description": "Retrieves an Actor by their ID and then constructs their full name by concatenating their first and last names.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Actor",
        "com.sparta.engineering72.sakilaproject.respositories.ActorRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 45,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\ActorService.java",
      "type": "Service"
    },
    {
      "name": "CategoryService",
      "description": "The CategoryService class is a Spring service component responsible for encapsulating business logic related to Category entities. It acts as an intermediary between controllers (or other service layers) and the data access layer (CategoryRepository) to perform operations such as retrieving all categories or a specific category by its ID.",
      "methods": [
        {
          "name": "CategoryService",
          "signature": "public CategoryService(CategoryRepository categoryRepository)",
          "description": "Constructor for CategoryService. It injects an instance of CategoryRepository, making it available for data access operations within the service.",
          "complexity": "Low"
        },
        {
          "name": "getAllCategories",
          "signature": "public List<Category> getAllCategories()",
          "description": "Retrieves a list of all Category entities available in the database by delegating the call to the CategoryRepository.",
          "complexity": "Low"
        },
        {
          "name": "getByCategoryId",
          "signature": "public Category getByCategoryId(Integer id)",
          "description": "Retrieves a single Category entity from the database based on its unique identifier (ID) by delegating the call to the CategoryRepository.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Category",
        "com.sparta.engineering72.sakilaproject.respositories.CategoryRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 27,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\CategoryService.java",
      "type": "Service"
    },
    {
      "name": "CustomerService",
      "description": "The CustomerService class is a Spring service component responsible for encapsulating business logic related to Customer entities. It acts as an intermediary between the presentation/controller layer and the data access layer (CustomerRepository), providing a set of methods to perform various CRUD (Create, Read, Update, Delete) operations and custom queries on customer data. This service abstracts the underlying data persistence mechanisms, making it easier to manage and interact with customer-related information within the application.",
      "methods": [
        {
          "name": "CustomerService",
          "signature": "public CustomerService(CustomerRepository customerRepository)",
          "description": "Constructor for CustomerService, responsible for injecting the CustomerRepository dependency. This allows the service to interact with the database for customer-related operations.",
          "complexity": "Low"
        },
        {
          "name": "getAllCustomers",
          "signature": "public List<Customer> getAllCustomers()",
          "description": "Retrieves a list of all Customer entities currently stored in the database.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFirstName",
          "signature": "public List<Customer> getCustomersByFirstName(String firstName)",
          "description": "Retrieves a list of Customer entities whose first name matches the provided 'firstName' string.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByLastName",
          "signature": "public List<Customer> getCustomersByLastName(String lastName)",
          "description": "Retrieves a list of Customer entities whose last name matches the provided 'lastName' string.",
          "complexity": "Low"
        },
        {
          "name": "getCustomersByFullName",
          "signature": "public List<Customer> getCustomersByFullName(String firstName, String lastName)",
          "description": "Retrieves a list of Customer entities whose first name and last name both match the provided 'firstName' and 'lastName' strings.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByID",
          "signature": "public Customer getCustomerByID(int id)",
          "description": "Retrieves a single Customer entity based on its unique customer ID.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerByEmail",
          "signature": "public Customer getCustomerByEmail(String email)",
          "description": "Retrieves a single Customer entity based on its unique email address.",
          "complexity": "Low"
        },
        {
          "name": "save",
          "signature": "public void save(Customer customer)",
          "description": "Saves a given Customer entity to the database. This method can be used for both creating new customer records and updating existing ones.",
          "complexity": "Low"
        },
        {
          "name": "getCustomerCount",
          "signature": "public Integer getCustomerCount()",
          "description": "Retrieves the total number of Customer entities currently present in the database.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Customer",
        "com.sparta.engineering72.sakilaproject.respositories.CustomerRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 50,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\CustomerService.java",
      "type": "Service"
    },
    {
      "name": "FilmService",
      "description": "The FilmService class acts as a service layer component in a Spring Boot application, responsible for handling business logic related to Film entities. It interacts with the FilmRepository to perform CRUD operations and retrieve film-related data from the database. This service provides methods to fetch all films, films by ID, title, availability, category, and actor, as well as methods to save and delete film records.",
      "methods": [
        {
          "name": "getAllFilms",
          "signature": "public List<Film> getAllFilms()",
          "description": "Retrieves a list of all film records available in the database.",
          "complexity": "Low"
        },
        {
          "name": "getFilmByID",
          "signature": "public Film getFilmByID(int id)",
          "description": "Retrieves a single film record based on its unique film ID.",
          "complexity": "Low"
        },
        {
          "name": "getFilmsByTitle",
          "signature": "public List<Film> getFilmsByTitle(String title)",
          "description": "Retrieves a list of films whose titles match the given string.",
          "complexity": "Low"
        },
        {
          "name": "getAvailableFilms",
          "signature": "public List<Film> getAvailableFilms()",
          "description": "Retrieves a list of films that are currently marked as available.",
          "complexity": "Low"
        },
        {
          "name": "getAvailableFilmCount",
          "signature": "public Integer getAvailableFilmCount(Integer id)",
          "description": "Retrieves the count of available copies for a specific film identified by its ID.",
          "complexity": "Low"
        },
        {
          "name": "getFilmsByCategory",
          "signature": "public List<Film> getFilmsByCategory(Integer id)",
          "description": "Retrieves a list of films belonging to a specific category, identified by the category ID.",
          "complexity": "Low"
        },
        {
          "name": "getFilmsByActor",
          "signature": "public List<Film> getFilmsByActor(Integer id)",
          "description": "Retrieves a list of films featuring a specific actor, identified by the actor ID.",
          "complexity": "Low"
        },
        {
          "name": "save",
          "signature": "public void save(Film film)",
          "description": "Saves a new film entity or updates an existing one in the database.",
          "complexity": "Low"
        },
        {
          "name": "deleteFilmById",
          "signature": "public void deleteFilmById(int id)",
          "description": "Deletes a film record from the database based on its unique film ID.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Film",
        "com.sparta.engineering72.sakilaproject.respositories.FilmRepository",
        "org.springframework.stereotype.Service",
        "org.springframework.transaction.annotation.Transactional",
        "java.util.List"
      ],
      "linesOfCode": 57,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\FilmService.java",
      "type": "Service"
    },
    {
      "name": "InventoryService",
      "description": "The InventoryService class provides business logic for managing inventory-related operations. It acts as an intermediary between controllers and the data access layer (InventoryRepository), handling requests to retrieve, count, and delete inventory items.",
      "methods": [
        {
          "name": "InventoryService",
          "signature": "public InventoryService(InventoryRepository inventoryRepository)",
          "description": "Constructor for InventoryService, injecting the InventoryRepository dependency.",
          "complexity": "Low"
        },
        {
          "name": "getAllInventory",
          "signature": "public List<Inventory> getAllInventory()",
          "description": "Retrieves a list of all inventory items from the database.",
          "complexity": "Low"
        },
        {
          "name": "getInventoriesById",
          "signature": "public Inventory getInventoriesById(Integer id)",
          "description": "Retrieves a specific inventory item by its unique inventory ID.",
          "complexity": "Low"
        },
        {
          "name": "deleteInventoryItemById",
          "signature": "public void deleteInventoryItemById(Integer id)",
          "description": "Deletes an inventory item from the database based on its unique inventory ID. This operation is transactional.",
          "complexity": "Low"
        },
        {
          "name": "getInventoryCount",
          "signature": "public Integer getInventoryCount()",
          "description": "Retrieves the total count of all inventory items in the database.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Inventory",
        "com.sparta.engineering72.sakilaproject.respositories.InventoryRepository",
        "org.springframework.stereotype.Service",
        "org.springframework.transaction.annotation.Transactional",
        "java.util.List"
      ],
      "linesOfCode": 37,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\InventoryService.java",
      "type": "Service"
    },
    {
      "name": "RentalService",
      "description": "The RentalService class acts as a Spring service component responsible for handling business logic related to rental operations. It interacts with the RentalRepository to perform data access operations, such as retrieving rental records for a customer and adding new rental entries. This service encapsulates the core business rules for managing rentals, providing a clean API for other parts of the application to interact with rental data.",
      "methods": [
        {
          "name": "RentalService",
          "signature": "public RentalService(RentalRepository rentalRepository)",
          "description": "Constructor for the RentalService class. It uses dependency injection to receive and initialize an instance of RentalRepository, which is crucial for performing database operations related to rentals.",
          "complexity": "Low"
        },
        {
          "name": "getRentalsByCustomer",
          "signature": "public List<Rental> getRentalsByCustomer(Integer id)",
          "description": "Retrieves a list of all rental records associated with a specific customer, identified by their unique ID. It delegates the actual data fetching to the underlying RentalRepository.",
          "complexity": "Low"
        },
        {
          "name": "addRental",
          "signature": "public void addRental(int inventoryId, int customerId, Timestamp returnDate)",
          "description": "Creates and persists a new rental record. It takes the inventory ID, customer ID, and a specified return date. The rental date and last update timestamp are automatically generated using the current time. A default staff ID (1) is assigned. The newly created Rental entity is then saved to the database via the RentalRepository.",
          "complexity": "Medium"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Rental",
        "com.sparta.engineering72.sakilaproject.respositories.RentalRepository",
        "org.springframework.stereotype.Service",
        "java.sql.Timestamp",
        "java.time.LocalDateTime",
        "java.util.List"
      ],
      "linesOfCode": 36,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\RentalService.java",
      "type": "Service"
    },
    {
      "name": "StaffService",
      "description": "The StaffService class is a Spring service component responsible for encapsulating business logic related to Staff entities. It acts as an intermediary between the presentation/controller layer and the data access layer (StaffRepository), providing methods to retrieve staff information from the database. It is annotated with @Service, indicating its role in the application's service layer.",
      "methods": [
        {
          "name": "StaffService",
          "signature": "public StaffService(StaffRepository staffRepository)",
          "description": "Constructor for StaffService. It injects an instance of StaffRepository, making it available for data access operations within the service.",
          "complexity": "Low"
        },
        {
          "name": "getAllStaff",
          "signature": "public List<Staff> getAllStaff()",
          "description": "Retrieves a list of all Staff entities available in the database by delegating the call to the StaffRepository's findAll method.",
          "complexity": "Low"
        },
        {
          "name": "getStaffByUsername",
          "signature": "public Staff getStaffByUsername(String username)",
          "description": "Retrieves a single Staff entity based on the provided username by delegating the call to a custom method in the StaffRepository.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.entities.Staff",
        "com.sparta.engineering72.sakilaproject.respositories.StaffRepository",
        "org.springframework.stereotype.Service",
        "java.util.List"
      ],
      "linesOfCode": 25,
      "filePath": ".\\sakila-java\\src\\main\\java\\com\\sparta\\engineering72\\sakilaproject\\services\\StaffService.java",
      "type": "Service"
    },
    {
      "name": "MockTests",
      "description": "This code segment provides the package declaration and a comprehensive list of import statements for a Java class. Based on these imports, the class is clearly a JUnit test class, heavily leveraging the Mockito framework for mocking dependencies. It is part of a Spring Boot application, specifically within a 'Sakila project', and is designed to test components like controllers (Actor, Category, Customer, Film), services, and repositories defined within the 'com.sparta.engineering72.sakilaproject' package structure. The presence of JUnit 4 annotations (@Before, @Test, @RunWith) combined with JUnit 5 assertions (assertEquals) and Mockito annotations (@InjectMocks, @Spy) and static methods (when, verify) indicates a robust testing setup. The `@RunWith(MockitoJUnitRunner.Silent.class)` annotation confirms it's a Mockito-enabled JUnit test runner with silent mode. The import of `ModelMap` suggests that some controller methods being tested might be preparing data for UI views. No method definitions were provided in the given code segment.",
      "methods": [],
      "dependencies": [
        "org.mockito.InjectMocks",
        "com.sparta.engineering72.sakilaproject.services.*",
        "org.springframework.ui.ModelMap",
        "com.sparta.engineering72.sakilaproject.controller.ActorController",
        "org.junit.runner.RunWith",
        "java.util.Date",
        "com.sparta.engineering72.sakilaproject.entities.*",
        "org.mockito.junit.MockitoJUnitRunner",
        "java.sql.Timestamp",
        "com.sparta.engineering72.sakilaproject.controller.CustomerController",
        "java.math.BigDecimal",
        "org.mockito.MockitoAnnotations",
        "static org.junit.jupiter.api.Assertions.assertEquals",
        "org.junit.Before",
        "org.junit.Test",
        "static org.mockito.Mockito.when",
        "org.mockito.Spy",
        "com.sparta.engineering72.sakilaproject.respositories.*",
        "static org.mockito.Mockito.verify",
        "com.sparta.engineering72.sakilaproject.controller.CategoryController",
        "com.sparta.engineering72.sakilaproject.controller.FilmController"
      ],
      "linesOfCode": 410,
      "filePath": ".\\sakila-java\\src\\test\\java\\com\\sparta\\engineering72\\sakilaproject\\MockTests.java",
      "type": "Util"
    },
    {
      "name": "SakilaProjectApplicationTests",
      "description": "This class serves as a unit test suite for the `MainController` within the Sakila Project application. It verifies the expected return values of specific controller methods (`home`, `account`, `login`) by instantiating the controller and asserting the results using JUnit 4's `@Test` annotation and JUnit 5's `Assertions.assertEquals`.",
      "methods": [
        {
          "name": "MainController1",
          "signature": "public void MainController1()",
          "description": "Tests the `home()` method of the `MainController` to ensure it returns the string \"home\". This verifies the correct mapping or logic for the home page.",
          "complexity": "Low"
        },
        {
          "name": "MainController2",
          "signature": "public void MainController2()",
          "description": "Tests the `account()` method of the `MainController` to ensure it returns the string \"account\". This verifies the correct mapping or logic for the account page.",
          "complexity": "Low"
        },
        {
          "name": "MainController3",
          "signature": "public void MainController3()",
          "description": "Tests the `login()` method of the `MainController` to ensure it returns the string \"login\". This verifies the correct mapping or logic for the login page.",
          "complexity": "Low"
        }
      ],
      "dependencies": [
        "com.sparta.engineering72.sakilaproject.controller.MainController",
        "org.junit.Test",
        "org.junit.jupiter.api.Assertions"
      ],
      "linesOfCode": 33,
      "filePath": ".\\sakila-java\\src\\test\\java\\com\\sparta\\engineering72\\sakilaproject\\SakilaProjectApplicationTests.java",
      "type": "Util"
    }
  ],
  "metadata": {
    "llmProvider": "Gemini",
    "totalFiles": 42,
    "totalModules": 42
  }
}